
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d04  0800387c  0800387c  0001387c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007588  08007588  00017588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000000  08007590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020088  2**0
                  CONTENTS
  8 .bss          00003864  20000088  20000088  00020088  2**2
                  ALLOC
  9 ._user_heap_stack 00008004  200038ec  200038ec  00020088  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 11 .debug_info   000218b7  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004791  00000000  00000000  0004196f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0000ff63  00000000  00000000  00046100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00056068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00057140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c2f  00000000  00000000  00058848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aeed  00000000  00000000  0007f477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1a00  00000000  00000000  0009a364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bd64  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003040  00000000  00000000  0017bdb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000088 	.word	0x20000088
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003864 	.word	0x08003864

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000008c 	.word	0x2000008c
 80001e8:	08003864 	.word	0x08003864

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80004e4:	20f0      	movs	r0, #240	; 0xf0
 80004e6:	4770      	bx	lr

080004e8 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80004e8:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80004ec:	4770      	bx	lr

080004ee <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80004ee:	2029      	movs	r0, #41	; 0x29
 80004f0:	f000 ba7c 	b.w	80009ec <LCD_IO_WriteReg>

080004f4 <ili9341_DisplayOff>:
 80004f4:	2028      	movs	r0, #40	; 0x28
 80004f6:	f000 ba79 	b.w	80009ec <LCD_IO_WriteReg>

080004fa <ili9341_Init>:
{
 80004fa:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80004fc:	f000 f9fc 	bl	80008f8 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8000500:	20ca      	movs	r0, #202	; 0xca
 8000502:	f000 fa73 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000506:	20c3      	movs	r0, #195	; 0xc3
 8000508:	f000 fa54 	bl	80009b4 <LCD_IO_WriteData>
 800050c:	2008      	movs	r0, #8
 800050e:	f000 fa51 	bl	80009b4 <LCD_IO_WriteData>
 8000512:	2050      	movs	r0, #80	; 0x50
 8000514:	f000 fa4e 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000518:	20cf      	movs	r0, #207	; 0xcf
 800051a:	f000 fa67 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fa48 	bl	80009b4 <LCD_IO_WriteData>
 8000524:	20c1      	movs	r0, #193	; 0xc1
 8000526:	f000 fa45 	bl	80009b4 <LCD_IO_WriteData>
 800052a:	2030      	movs	r0, #48	; 0x30
 800052c:	f000 fa42 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000530:	20ed      	movs	r0, #237	; 0xed
 8000532:	f000 fa5b 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000536:	2064      	movs	r0, #100	; 0x64
 8000538:	f000 fa3c 	bl	80009b4 <LCD_IO_WriteData>
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fa39 	bl	80009b4 <LCD_IO_WriteData>
 8000542:	2012      	movs	r0, #18
 8000544:	f000 fa36 	bl	80009b4 <LCD_IO_WriteData>
 8000548:	2081      	movs	r0, #129	; 0x81
 800054a:	f000 fa33 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800054e:	20e8      	movs	r0, #232	; 0xe8
 8000550:	f000 fa4c 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000554:	2085      	movs	r0, #133	; 0x85
 8000556:	f000 fa2d 	bl	80009b4 <LCD_IO_WriteData>
 800055a:	2000      	movs	r0, #0
 800055c:	f000 fa2a 	bl	80009b4 <LCD_IO_WriteData>
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f000 fa27 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000566:	20cb      	movs	r0, #203	; 0xcb
 8000568:	f000 fa40 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800056c:	2039      	movs	r0, #57	; 0x39
 800056e:	f000 fa21 	bl	80009b4 <LCD_IO_WriteData>
 8000572:	202c      	movs	r0, #44	; 0x2c
 8000574:	f000 fa1e 	bl	80009b4 <LCD_IO_WriteData>
 8000578:	2000      	movs	r0, #0
 800057a:	f000 fa1b 	bl	80009b4 <LCD_IO_WriteData>
 800057e:	2034      	movs	r0, #52	; 0x34
 8000580:	f000 fa18 	bl	80009b4 <LCD_IO_WriteData>
 8000584:	2002      	movs	r0, #2
 8000586:	f000 fa15 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800058a:	20f7      	movs	r0, #247	; 0xf7
 800058c:	f000 fa2e 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000590:	2020      	movs	r0, #32
 8000592:	f000 fa0f 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000596:	20ea      	movs	r0, #234	; 0xea
 8000598:	f000 fa28 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fa09 	bl	80009b4 <LCD_IO_WriteData>
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 fa06 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005a8:	20b1      	movs	r0, #177	; 0xb1
 80005aa:	f000 fa1f 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fa00 	bl	80009b4 <LCD_IO_WriteData>
 80005b4:	201b      	movs	r0, #27
 80005b6:	f000 f9fd 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005ba:	20b6      	movs	r0, #182	; 0xb6
 80005bc:	f000 fa16 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 f9f7 	bl	80009b4 <LCD_IO_WriteData>
 80005c6:	20a2      	movs	r0, #162	; 0xa2
 80005c8:	f000 f9f4 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005cc:	20c0      	movs	r0, #192	; 0xc0
 80005ce:	f000 fa0d 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f000 f9ee 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d8:	20c1      	movs	r0, #193	; 0xc1
 80005da:	f000 fa07 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005de:	2010      	movs	r0, #16
 80005e0:	f000 f9e8 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e4:	20c5      	movs	r0, #197	; 0xc5
 80005e6:	f000 fa01 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ea:	2045      	movs	r0, #69	; 0x45
 80005ec:	f000 f9e2 	bl	80009b4 <LCD_IO_WriteData>
 80005f0:	2015      	movs	r0, #21
 80005f2:	f000 f9df 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f6:	20c7      	movs	r0, #199	; 0xc7
 80005f8:	f000 f9f8 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005fc:	2090      	movs	r0, #144	; 0x90
 80005fe:	f000 f9d9 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000602:	2036      	movs	r0, #54	; 0x36
 8000604:	f000 f9f2 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000608:	20c8      	movs	r0, #200	; 0xc8
 800060a:	f000 f9d3 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060e:	20f2      	movs	r0, #242	; 0xf2
 8000610:	f000 f9ec 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 f9cd 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061a:	20b0      	movs	r0, #176	; 0xb0
 800061c:	f000 f9e6 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000620:	20c2      	movs	r0, #194	; 0xc2
 8000622:	f000 f9c7 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000626:	20b6      	movs	r0, #182	; 0xb6
 8000628:	f000 f9e0 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062c:	200a      	movs	r0, #10
 800062e:	f000 f9c1 	bl	80009b4 <LCD_IO_WriteData>
 8000632:	20a7      	movs	r0, #167	; 0xa7
 8000634:	f000 f9be 	bl	80009b4 <LCD_IO_WriteData>
 8000638:	2027      	movs	r0, #39	; 0x27
 800063a:	f000 f9bb 	bl	80009b4 <LCD_IO_WriteData>
 800063e:	2004      	movs	r0, #4
 8000640:	f000 f9b8 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000644:	202a      	movs	r0, #42	; 0x2a
 8000646:	f000 f9d1 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f9b2 	bl	80009b4 <LCD_IO_WriteData>
 8000650:	2000      	movs	r0, #0
 8000652:	f000 f9af 	bl	80009b4 <LCD_IO_WriteData>
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f9ac 	bl	80009b4 <LCD_IO_WriteData>
 800065c:	20ef      	movs	r0, #239	; 0xef
 800065e:	f000 f9a9 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000662:	202b      	movs	r0, #43	; 0x2b
 8000664:	f000 f9c2 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000668:	2000      	movs	r0, #0
 800066a:	f000 f9a3 	bl	80009b4 <LCD_IO_WriteData>
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f9a0 	bl	80009b4 <LCD_IO_WriteData>
 8000674:	2001      	movs	r0, #1
 8000676:	f000 f99d 	bl	80009b4 <LCD_IO_WriteData>
 800067a:	203f      	movs	r0, #63	; 0x3f
 800067c:	f000 f99a 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000680:	20f6      	movs	r0, #246	; 0xf6
 8000682:	f000 f9b3 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f994 	bl	80009b4 <LCD_IO_WriteData>
 800068c:	2000      	movs	r0, #0
 800068e:	f000 f991 	bl	80009b4 <LCD_IO_WriteData>
 8000692:	2006      	movs	r0, #6
 8000694:	f000 f98e 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000698:	202c      	movs	r0, #44	; 0x2c
 800069a:	f000 f9a7 	bl	80009ec <LCD_IO_WriteReg>
  LCD_Delay(200);
 800069e:	20c8      	movs	r0, #200	; 0xc8
 80006a0:	f000 f9f6 	bl	8000a90 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006a4:	2026      	movs	r0, #38	; 0x26
 80006a6:	f000 f9a1 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 f982 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006b0:	20e0      	movs	r0, #224	; 0xe0
 80006b2:	f000 f99b 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b6:	200f      	movs	r0, #15
 80006b8:	f000 f97c 	bl	80009b4 <LCD_IO_WriteData>
 80006bc:	2029      	movs	r0, #41	; 0x29
 80006be:	f000 f979 	bl	80009b4 <LCD_IO_WriteData>
 80006c2:	2024      	movs	r0, #36	; 0x24
 80006c4:	f000 f976 	bl	80009b4 <LCD_IO_WriteData>
 80006c8:	200c      	movs	r0, #12
 80006ca:	f000 f973 	bl	80009b4 <LCD_IO_WriteData>
 80006ce:	200e      	movs	r0, #14
 80006d0:	f000 f970 	bl	80009b4 <LCD_IO_WriteData>
 80006d4:	2009      	movs	r0, #9
 80006d6:	f000 f96d 	bl	80009b4 <LCD_IO_WriteData>
 80006da:	204e      	movs	r0, #78	; 0x4e
 80006dc:	f000 f96a 	bl	80009b4 <LCD_IO_WriteData>
 80006e0:	2078      	movs	r0, #120	; 0x78
 80006e2:	f000 f967 	bl	80009b4 <LCD_IO_WriteData>
 80006e6:	203c      	movs	r0, #60	; 0x3c
 80006e8:	f000 f964 	bl	80009b4 <LCD_IO_WriteData>
 80006ec:	2009      	movs	r0, #9
 80006ee:	f000 f961 	bl	80009b4 <LCD_IO_WriteData>
 80006f2:	2013      	movs	r0, #19
 80006f4:	f000 f95e 	bl	80009b4 <LCD_IO_WriteData>
 80006f8:	2005      	movs	r0, #5
 80006fa:	f000 f95b 	bl	80009b4 <LCD_IO_WriteData>
 80006fe:	2017      	movs	r0, #23
 8000700:	f000 f958 	bl	80009b4 <LCD_IO_WriteData>
 8000704:	2011      	movs	r0, #17
 8000706:	f000 f955 	bl	80009b4 <LCD_IO_WriteData>
 800070a:	2000      	movs	r0, #0
 800070c:	f000 f952 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000710:	20e1      	movs	r0, #225	; 0xe1
 8000712:	f000 f96b 	bl	80009ec <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000716:	2000      	movs	r0, #0
 8000718:	f000 f94c 	bl	80009b4 <LCD_IO_WriteData>
 800071c:	2016      	movs	r0, #22
 800071e:	f000 f949 	bl	80009b4 <LCD_IO_WriteData>
 8000722:	201b      	movs	r0, #27
 8000724:	f000 f946 	bl	80009b4 <LCD_IO_WriteData>
 8000728:	2004      	movs	r0, #4
 800072a:	f000 f943 	bl	80009b4 <LCD_IO_WriteData>
 800072e:	2011      	movs	r0, #17
 8000730:	f000 f940 	bl	80009b4 <LCD_IO_WriteData>
 8000734:	2007      	movs	r0, #7
 8000736:	f000 f93d 	bl	80009b4 <LCD_IO_WriteData>
 800073a:	2031      	movs	r0, #49	; 0x31
 800073c:	f000 f93a 	bl	80009b4 <LCD_IO_WriteData>
 8000740:	2033      	movs	r0, #51	; 0x33
 8000742:	f000 f937 	bl	80009b4 <LCD_IO_WriteData>
 8000746:	2042      	movs	r0, #66	; 0x42
 8000748:	f000 f934 	bl	80009b4 <LCD_IO_WriteData>
 800074c:	2005      	movs	r0, #5
 800074e:	f000 f931 	bl	80009b4 <LCD_IO_WriteData>
 8000752:	200c      	movs	r0, #12
 8000754:	f000 f92e 	bl	80009b4 <LCD_IO_WriteData>
 8000758:	200a      	movs	r0, #10
 800075a:	f000 f92b 	bl	80009b4 <LCD_IO_WriteData>
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f000 f928 	bl	80009b4 <LCD_IO_WriteData>
 8000764:	202f      	movs	r0, #47	; 0x2f
 8000766:	f000 f925 	bl	80009b4 <LCD_IO_WriteData>
 800076a:	200f      	movs	r0, #15
 800076c:	f000 f922 	bl	80009b4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000770:	2011      	movs	r0, #17
 8000772:	f000 f93b 	bl	80009ec <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000776:	20c8      	movs	r0, #200	; 0xc8
 8000778:	f000 f98a 	bl	8000a90 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800077c:	2029      	movs	r0, #41	; 0x29
 800077e:	f000 f935 	bl	80009ec <LCD_IO_WriteReg>
}
 8000782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000786:	202c      	movs	r0, #44	; 0x2c
 8000788:	f000 b930 	b.w	80009ec <LCD_IO_WriteReg>

0800078c <ili9341_ReadID>:
{
 800078c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800078e:	f000 f8b3 	bl	80008f8 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8000792:	2103      	movs	r1, #3
 8000794:	20d3      	movs	r0, #211	; 0xd3
 8000796:	f000 f945 	bl	8000a24 <LCD_IO_ReadData>
}
 800079a:	b280      	uxth	r0, r0
 800079c:	bd08      	pop	{r3, pc}
	...

080007a0 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80007a0:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007a2:	4c21      	ldr	r4, [pc, #132]	; (8000828 <SPIx_Init+0x88>)
{
 80007a4:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80007a6:	4620      	mov	r0, r4
 80007a8:	f002 fcee 	bl	8003188 <HAL_SPI_GetState>
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d138      	bne.n	8000822 <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <SPIx_Init+0x8c>)
 80007b2:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80007b4:	2318      	movs	r3, #24
 80007b6:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80007c0:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80007c4:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80007c6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80007ca:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <SPIx_Init+0x90>)
 80007ce:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80007d0:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80007d2:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80007d4:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80007d6:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80007d8:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 80007da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007dc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007e0:	645a      	str	r2, [r3, #68]	; 0x44
 80007e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80007e8:	9201      	str	r2, [sp, #4]
 80007ea:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80007ec:	9002      	str	r0, [sp, #8]
 80007ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007f0:	f042 0220 	orr.w	r2, r2, #32
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
 80007f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f8:	f003 0320 	and.w	r3, r3, #32
 80007fc:	9302      	str	r3, [sp, #8]
 80007fe:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000800:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000804:	2302      	movs	r3, #2
 8000806:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800080a:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800080c:	2001      	movs	r0, #1
 800080e:	2305      	movs	r3, #5
 8000810:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000814:	a903      	add	r1, sp, #12
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <SPIx_Init+0x94>)
 8000818:	f000 ff26 	bl	8001668 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 800081c:	4620      	mov	r0, r4
 800081e:	f002 f950 	bl	8002ac2 <HAL_SPI_Init>
}
 8000822:	b008      	add	sp, #32
 8000824:	bd10      	pop	{r4, pc}
 8000826:	bf00      	nop
 8000828:	200000a4 	.word	0x200000a4
 800082c:	40015000 	.word	0x40015000
 8000830:	40023800 	.word	0x40023800
 8000834:	40021400 	.word	0x40021400

08000838 <SPIx_Write>:
{
 8000838:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <SPIx_Write+0x28>)
{
 800083c:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4808      	ldr	r0, [pc, #32]	; (8000864 <SPIx_Write+0x2c>)
 8000844:	2201      	movs	r2, #1
 8000846:	f10d 0106 	add.w	r1, sp, #6
 800084a:	f002 f9b2 	bl	8002bb2 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 800084e:	b120      	cbz	r0, 800085a <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <SPIx_Write+0x2c>)
 8000852:	f002 f998 	bl	8002b86 <HAL_SPI_DeInit>
  SPIx_Init();
 8000856:	f7ff ffa3 	bl	80007a0 <SPIx_Init>
}
 800085a:	b003      	add	sp, #12
 800085c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000860:	20000038 	.word	0x20000038
 8000864:	200000a4 	.word	0x200000a4

08000868 <BSP_LED_Init>:
{
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 800086c:	bb08      	cbnz	r0, 80008b2 <BSP_LED_Init+0x4a>
 800086e:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <BSP_LED_Init+0x68>)
 8000870:	9001      	str	r0, [sp, #4]
 8000872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000878:	631a      	str	r2, [r3, #48]	; 0x30
 800087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000884:	4c13      	ldr	r4, [pc, #76]	; (80008d4 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000888:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800088c:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000890:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000892:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000896:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800089a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800089c:	2302      	movs	r3, #2
 800089e:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008a0:	f000 fee2 	bl	8001668 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008a4:	6860      	ldr	r0, [r4, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	4629      	mov	r1, r5
 80008aa:	f000 ffc9 	bl	8001840 <HAL_GPIO_WritePin>
}
 80008ae:	b009      	add	sp, #36	; 0x24
 80008b0:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80008b2:	2801      	cmp	r0, #1
 80008b4:	d1e6      	bne.n	8000884 <BSP_LED_Init+0x1c>
 80008b6:	2300      	movs	r3, #0
 80008b8:	9302      	str	r3, [sp, #8]
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <BSP_LED_Init+0x68>)
 80008bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	9b02      	ldr	r3, [sp, #8]
 80008ce:	e7d9      	b.n	8000884 <BSP_LED_Init+0x1c>
 80008d0:	40023800 	.word	0x40023800
 80008d4:	20000038 	.word	0x20000038
 80008d8:	0800387c 	.word	0x0800387c

080008dc <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <BSP_LED_On+0x14>)
 80008de:	4905      	ldr	r1, [pc, #20]	; (80008f4 <BSP_LED_On+0x18>)
 80008e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80008e4:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 80008e8:	6858      	ldr	r0, [r3, #4]
 80008ea:	2201      	movs	r2, #1
 80008ec:	f000 bfa8 	b.w	8001840 <HAL_GPIO_WritePin>
 80008f0:	20000038 	.word	0x20000038
 80008f4:	0800387c 	.word	0x0800387c

080008f8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <LCD_IO_Init+0xac>)
 80008fc:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
{
 8000900:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000902:	2d00      	cmp	r5, #0
 8000904:	d14b      	bne.n	800099e <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000906:	4c28      	ldr	r4, [pc, #160]	; (80009a8 <LCD_IO_Init+0xb0>)
 8000908:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 800090a:	2601      	movs	r6, #1
 800090c:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
    LCD_WRX_GPIO_CLK_ENABLE();
 8000910:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000912:	4826      	ldr	r0, [pc, #152]	; (80009ac <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8000914:	f043 0308 	orr.w	r3, r3, #8
 8000918:	6323      	str	r3, [r4, #48]	; 0x30
 800091a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800091c:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000924:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8000926:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000928:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800092e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000930:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000934:	f000 fe98 	bl	8001668 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000938:	9501      	str	r5, [sp, #4]
 800093a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6323      	str	r3, [r4, #48]	; 0x30
 8000944:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800094e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000950:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000954:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000958:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800095c:	f000 fe84 	bl	8001668 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000960:	9502      	str	r5, [sp, #8]
 8000962:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000964:	4812      	ldr	r0, [pc, #72]	; (80009b0 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	6323      	str	r3, [r4, #48]	; 0x30
 800096c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000972:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8000974:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000976:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8000978:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800097a:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800097e:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000982:	f000 fe71 	bl	8001668 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <LCD_IO_Init+0xb8>)
 8000988:	462a      	mov	r2, r5
 800098a:	4621      	mov	r1, r4
 800098c:	f000 ff58 	bl	8001840 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <LCD_IO_Init+0xb8>)
 8000992:	4632      	mov	r2, r6
 8000994:	4621      	mov	r1, r4
 8000996:	f000 ff53 	bl	8001840 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800099a:	f7ff ff01 	bl	80007a0 <SPIx_Init>
  }
}
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020c00 	.word	0x40020c00
 80009b0:	40020800 	.word	0x40020800

080009b4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80009b4:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80009b6:	4d0b      	ldr	r5, [pc, #44]	; (80009e4 <LCD_IO_WriteData+0x30>)
{
 80009b8:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 80009ba:	2201      	movs	r2, #1
 80009bc:	480a      	ldr	r0, [pc, #40]	; (80009e8 <LCD_IO_WriteData+0x34>)
 80009be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c2:	f000 ff3d 	bl	8001840 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80009c6:	2200      	movs	r2, #0
 80009c8:	2104      	movs	r1, #4
 80009ca:	4628      	mov	r0, r5
 80009cc:	f000 ff38 	bl	8001840 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80009d0:	4620      	mov	r0, r4
 80009d2:	f7ff ff31 	bl	8000838 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80009d6:	4628      	mov	r0, r5
 80009d8:	2201      	movs	r2, #1
}
 80009da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 80009de:	2104      	movs	r1, #4
 80009e0:	f000 bf2e 	b.w	8001840 <HAL_GPIO_WritePin>
 80009e4:	40020800 	.word	0x40020800
 80009e8:	40020c00 	.word	0x40020c00

080009ec <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80009ec:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80009ee:	4d0b      	ldr	r5, [pc, #44]	; (8000a1c <LCD_IO_WriteReg+0x30>)
{
 80009f0:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 80009f2:	2200      	movs	r2, #0
 80009f4:	480a      	ldr	r0, [pc, #40]	; (8000a20 <LCD_IO_WriteReg+0x34>)
 80009f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fa:	f000 ff21 	bl	8001840 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80009fe:	2200      	movs	r2, #0
 8000a00:	2104      	movs	r1, #4
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 ff1c 	bl	8001840 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8000a08:	4620      	mov	r0, r4
 8000a0a:	f7ff ff15 	bl	8000838 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000a0e:	4628      	mov	r0, r5
 8000a10:	2201      	movs	r2, #1
}
 8000a12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8000a16:	2104      	movs	r1, #4
 8000a18:	f000 bf12 	b.w	8001840 <HAL_GPIO_WritePin>
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00

08000a24 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8000a24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8000a2a:	4815      	ldr	r0, [pc, #84]	; (8000a80 <LCD_IO_ReadData+0x5c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2104      	movs	r1, #4
 8000a30:	f000 ff06 	bl	8001840 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <LCD_IO_ReadData+0x60>)
 8000a3c:	f000 ff00 	bl	8001840 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8000a40:	4628      	mov	r0, r5
 8000a42:	f7ff fef9 	bl	8000838 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <LCD_IO_ReadData+0x64>)
 8000a48:	4810      	ldr	r0, [pc, #64]	; (8000a8c <LCD_IO_ReadData+0x68>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4622      	mov	r2, r4
 8000a4e:	a901      	add	r1, sp, #4
 8000a50:	f002 fab3 	bl	8002fba <HAL_SPI_Receive>
  if(status != HAL_OK)
 8000a54:	b120      	cbz	r0, 8000a60 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 8000a56:	480d      	ldr	r0, [pc, #52]	; (8000a8c <LCD_IO_ReadData+0x68>)
 8000a58:	f002 f895 	bl	8002b86 <HAL_SPI_DeInit>
  SPIx_Init();
 8000a5c:	f7ff fea0 	bl	80007a0 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <LCD_IO_ReadData+0x60>)
  return readvalue;
 8000a62:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8000a64:	2201      	movs	r2, #1
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	f000 fee9 	bl	8001840 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <LCD_IO_ReadData+0x5c>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	2104      	movs	r1, #4
 8000a74:	f000 fee4 	bl	8001840 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8000a78:	4620      	mov	r0, r4
 8000a7a:	b003      	add	sp, #12
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	20000038 	.word	0x20000038
 8000a8c:	200000a4 	.word	0x200000a4

08000a90 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8000a90:	f000 bb60 	b.w	8001154 <HAL_Delay>

08000a94 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8000a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8000a98:	4c15      	ldr	r4, [pc, #84]	; (8000af0 <FillBuffer+0x5c>)
{
 8000a9a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8000a9e:	4616      	mov	r6, r2
 8000aa0:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8000aa2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8000aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000aae:	60e3      	str	r3, [r4, #12]
{
 8000ab0:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <FillBuffer+0x60>)
 8000ab4:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000ab6:	4620      	mov	r0, r4
{
 8000ab8:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8000aba:	f000 fcca 	bl	8001452 <HAL_DMA2D_Init>
 8000abe:	b998      	cbnz	r0, 8000ae8 <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	f000 fd8c 	bl	80015e0 <HAL_DMA2D_ConfigLayer>
 8000ac8:	b970      	cbnz	r0, 8000ae8 <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8000aca:	9700      	str	r7, [sp, #0]
 8000acc:	4633      	mov	r3, r6
 8000ace:	462a      	mov	r2, r5
 8000ad0:	4649      	mov	r1, r9
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f000 fce9 	bl	80014aa <HAL_DMA2D_Start>
 8000ad8:	b930      	cbnz	r0, 8000ae8 <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000ada:	210a      	movs	r1, #10
 8000adc:	4620      	mov	r0, r4
      }
    }
  } 
}
 8000ade:	b003      	add	sp, #12
 8000ae0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8000ae4:	f000 bcfb 	b.w	80014de <HAL_DMA2D_PollForTransfer>
}
 8000ae8:	b003      	add	sp, #12
 8000aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000aee:	bf00      	nop
 8000af0:	20000100 	.word	0x20000100
 8000af4:	4002b000 	.word	0x4002b000

08000af8 <BSP_LCD_GetXSize>:
{
 8000af8:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8000afa:	4b02      	ldr	r3, [pc, #8]	; (8000b04 <BSP_LCD_GetXSize+0xc>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b00:	4798      	blx	r3
}
 8000b02:	bd08      	pop	{r3, pc}
 8000b04:	20003588 	.word	0x20003588

08000b08 <BSP_LCD_GetYSize>:
{
 8000b08:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8000b0a:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <BSP_LCD_GetYSize+0xc>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	4798      	blx	r3
}
 8000b12:	bd08      	pop	{r3, pc}
 8000b14:	20003588 	.word	0x20003588

08000b18 <BSP_LCD_LayerDefaultInit>:
{     
 8000b18:	b530      	push	{r4, r5, lr}
 8000b1a:	b08f      	sub	sp, #60	; 0x3c
  Layercfg.WindowX1 = 80;//BSP_LCD_GetXSize();
 8000b1c:	2300      	movs	r3, #0
{     
 8000b1e:	4604      	mov	r4, r0
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000b20:	4d16      	ldr	r5, [pc, #88]	; (8000b7c <BSP_LCD_LayerDefaultInit+0x64>)
  Layercfg.FBStartAdress = FB_Address;
 8000b22:	910a      	str	r1, [sp, #40]	; 0x28
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b24:	2002      	movs	r0, #2
  Layercfg.Alpha = 255;
 8000b26:	21ff      	movs	r1, #255	; 0xff
  Layercfg.Alpha0 = 0;
 8000b28:	e9cd 1306 	strd	r1, r3, [sp, #24]
  Layercfg.WindowX1 = 80;//BSP_LCD_GetXSize();
 8000b2c:	2250      	movs	r2, #80	; 0x50
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b2e:	9005      	str	r0, [sp, #20]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b30:	2107      	movs	r1, #7
 8000b32:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  Layercfg.WindowX1 = 80;//BSP_LCD_GetXSize();
 8000b36:	e9cd 3201 	strd	r3, r2, [sp, #4]
  Layercfg.WindowY1 = 80;//BSP_LCD_GetYSize();
 8000b3a:	e9cd 3203 	strd	r3, r2, [sp, #12]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  Layercfg.ImageHeight = 80;//BSP_LCD_GetYSize();
 8000b42:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000b46:	a901      	add	r1, sp, #4
 8000b48:	4622      	mov	r2, r4
 8000b4a:	4628      	mov	r0, r5
  Layercfg.Backcolor.Blue = 0;
 8000b4c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8000b50:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8000b54:	f001 facc 	bl	80020f0 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8000b58:	4809      	ldr	r0, [pc, #36]	; (8000b80 <BSP_LCD_LayerDefaultInit+0x68>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	fb02 0004 	mla	r0, r2, r4, r0
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b64:	6443      	str	r3, [r0, #68]	; 0x44
  DrawProp[LayerIndex].pFont     = &Font24;
 8000b66:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <BSP_LCD_LayerDefaultInit+0x6c>)
 8000b68:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8000b6a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000b6e:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_LTDC_EnableDither(&LtdcHandler);
 8000b70:	4628      	mov	r0, r5
 8000b72:	f001 faeb 	bl	800214c <HAL_LTDC_EnableDither>
}
 8000b76:	b00f      	add	sp, #60	; 0x3c
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200034e0 	.word	0x200034e0
 8000b80:	20000100 	.word	0x20000100
 8000b84:	2000004c 	.word	0x2000004c

08000b88 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8000b88:	4b01      	ldr	r3, [pc, #4]	; (8000b90 <BSP_LCD_SelectLayer+0x8>)
 8000b8a:	6598      	str	r0, [r3, #88]	; 0x58
}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000100 	.word	0x20000100

08000b94 <BSP_LCD_Clear>:
{ 
 8000b94:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <BSP_LCD_Clear+0x38>)
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <BSP_LCD_Clear+0x3c>)
 8000b9a:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8000b9c:	2334      	movs	r3, #52	; 0x34
 8000b9e:	fb03 2305 	mla	r3, r3, r5, r2
{ 
 8000ba2:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000ba4:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000ba6:	9103      	str	r1, [sp, #12]
{ 
 8000ba8:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8000baa:	f7ff ffa5 	bl	8000af8 <BSP_LCD_GetXSize>
 8000bae:	9002      	str	r0, [sp, #8]
 8000bb0:	f7ff ffaa 	bl	8000b08 <BSP_LCD_GetYSize>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	9000      	str	r0, [sp, #0]
 8000bba:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8000bbe:	9401      	str	r4, [sp, #4]
 8000bc0:	4628      	mov	r0, r5
 8000bc2:	f7ff ff67 	bl	8000a94 <FillBuffer>
}
 8000bc6:	b005      	add	sp, #20
 8000bc8:	bd30      	pop	{r4, r5, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000100 	.word	0x20000100
 8000bd0:	200034e0 	.word	0x200034e0

08000bd4 <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 8000bd4:	4b02      	ldr	r3, [pc, #8]	; (8000be0 <BSP_LCD_DisplayOn+0xc>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	b103      	cbz	r3, 8000bde <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8000bdc:	4718      	bx	r3
}
 8000bde:	4770      	bx	lr
 8000be0:	20003588 	.word	0x20003588

08000be4 <BSP_LCD_MspInit>:
{
 8000be4:	b530      	push	{r4, r5, lr}
 8000be6:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000bea:	4d4a      	ldr	r5, [pc, #296]	; (8000d14 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000bec:	484a      	ldr	r0, [pc, #296]	; (8000d18 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000bee:	4c4b      	ldr	r4, [pc, #300]	; (8000d1c <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	9201      	str	r2, [sp, #4]
 8000bf4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bf6:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8000bfa:	6459      	str	r1, [r3, #68]	; 0x44
 8000bfc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000bfe:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 8000c02:	9101      	str	r1, [sp, #4]
 8000c04:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8000c06:	9202      	str	r2, [sp, #8]
 8000c08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c0e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c12:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8000c16:	9102      	str	r1, [sp, #8]
 8000c18:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	9203      	str	r2, [sp, #12]
 8000c1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c1e:	f041 0101 	orr.w	r1, r1, #1
 8000c22:	6319      	str	r1, [r3, #48]	; 0x30
 8000c24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c26:	f001 0101 	and.w	r1, r1, #1
 8000c2a:	9103      	str	r1, [sp, #12]
 8000c2c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	9204      	str	r2, [sp, #16]
 8000c30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c32:	f041 0102 	orr.w	r1, r1, #2
 8000c36:	6319      	str	r1, [r3, #48]	; 0x30
 8000c38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c3a:	f001 0102 	and.w	r1, r1, #2
 8000c3e:	9104      	str	r1, [sp, #16]
 8000c40:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	9205      	str	r2, [sp, #20]
 8000c44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c46:	f041 0104 	orr.w	r1, r1, #4
 8000c4a:	6319      	str	r1, [r3, #48]	; 0x30
 8000c4c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c4e:	f001 0104 	and.w	r1, r1, #4
 8000c52:	9105      	str	r1, [sp, #20]
 8000c54:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c56:	9206      	str	r2, [sp, #24]
 8000c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c5a:	f041 0108 	orr.w	r1, r1, #8
 8000c5e:	6319      	str	r1, [r3, #48]	; 0x30
 8000c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c62:	f001 0108 	and.w	r1, r1, #8
 8000c66:	9106      	str	r1, [sp, #24]
 8000c68:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6a:	9207      	str	r2, [sp, #28]
 8000c6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c6e:	f041 0120 	orr.w	r1, r1, #32
 8000c72:	6319      	str	r1, [r3, #48]	; 0x30
 8000c74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c76:	f001 0120 	and.w	r1, r1, #32
 8000c7a:	9107      	str	r1, [sp, #28]
 8000c7c:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c7e:	9208      	str	r2, [sp, #32]
 8000c80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c82:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8000c86:	6319      	str	r1, [r3, #48]	; 0x30
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c8e:	9308      	str	r3, [sp, #32]
 8000c90:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c92:	f641 0158 	movw	r1, #6232	; 0x1858
 8000c96:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c98:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c9c:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ca0:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ca2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000ca4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ca6:	f000 fcdf 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000caa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cae:	a909      	add	r1, sp, #36	; 0x24
 8000cb0:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000cb2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cb4:	f000 fcd8 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000cb8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cbc:	a909      	add	r1, sp, #36	; 0x24
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000cc0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cc2:	f000 fcd1 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000cc6:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000cc8:	a909      	add	r1, sp, #36	; 0x24
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000ccc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000cce:	f000 fccb 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000cd6:	a909      	add	r1, sp, #36	; 0x24
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000cda:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8000cdc:	f000 fcc4 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ce0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ce4:	a909      	add	r1, sp, #36	; 0x24
 8000ce6:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000ce8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cea:	f000 fcbd 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cf2:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cf4:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cf6:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cf8:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cfa:	f000 fcb5 	bl	8001668 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000cfe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d02:	a909      	add	r1, sp, #36	; 0x24
 8000d04:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000d06:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000d08:	f000 fcae 	bl	8001668 <HAL_GPIO_Init>
}
 8000d0c:	b00f      	add	sp, #60	; 0x3c
 8000d0e:	bd30      	pop	{r4, r5, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020400 	.word	0x40020400
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40021800 	.word	0x40021800
 8000d20:	40020800 	.word	0x40020800
 8000d24:	40020c00 	.word	0x40020c00
 8000d28:	40021400 	.word	0x40021400

08000d2c <BSP_LCD_Init>:
{ 
 8000d2c:	b570      	push	{r4, r5, r6, lr}
    LtdcHandler.Instance = LTDC;
 8000d2e:	4c21      	ldr	r4, [pc, #132]	; (8000db4 <BSP_LCD_Init+0x88>)
 8000d30:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <BSP_LCD_Init+0x8c>)
 8000d32:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8000d34:	2109      	movs	r1, #9
 8000d36:	2301      	movs	r3, #1
 8000d38:	e9c4 1305 	strd	r1, r3, [r4, #20]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8000d3c:	201d      	movs	r0, #29
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e9c4 0307 	strd	r0, r3, [r4, #28]
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8000d44:	f240 150d 	movw	r5, #269	; 0x10d
 8000d48:	f240 1343 	movw	r3, #323	; 0x143
 8000d4c:	e9c4 5309 	strd	r5, r3, [r4, #36]	; 0x24
    LtdcHandler.Init.TotalHeigh = 327;
 8000d50:	f240 1617 	movw	r6, #279	; 0x117
 8000d54:	f240 1347 	movw	r3, #327	; 0x147
 8000d58:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d5c:	4e17      	ldr	r6, [pc, #92]	; (8000dbc <BSP_LCD_Init+0x90>)
 8000d5e:	2308      	movs	r3, #8
 8000d60:	65f3      	str	r3, [r6, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000d62:	23c0      	movs	r3, #192	; 0xc0
 8000d64:	66f3      	str	r3, [r6, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d66:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000d68:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000d6a:	6773      	str	r3, [r6, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000d6c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d74:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    LtdcHandler.Init.Backcolor.Blue= 0;
 8000d78:	86a5      	strh	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Red= 0;
 8000d7a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8000d7e:	f001 fc73 	bl	8002668 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d82:	e9c4 5501 	strd	r5, r5, [r4, #4]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000d86:	e9c4 5503 	strd	r5, r5, [r4, #12]
    BSP_LCD_MspInit();
 8000d8a:	f7ff ff2b 	bl	8000be4 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8000d8e:	4620      	mov	r0, r4
 8000d90:	f001 f942 	bl	8002018 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <BSP_LCD_Init+0x94>)
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <BSP_LCD_Init+0x98>)
 8000d98:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4798      	blx	r3
    BSP_SDRAM_Init();
 8000d9e:	f000 f925 	bl	8000fec <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 8000da2:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000da4:	220c      	movs	r2, #12
 8000da6:	fb02 6603 	mla	r6, r2, r3, r6
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <BSP_LCD_Init+0x9c>)
 8000dac:	64b3      	str	r3, [r6, #72]	; 0x48
}  
 8000dae:	4628      	mov	r0, r5
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
 8000db2:	bf00      	nop
 8000db4:	200034e0 	.word	0x200034e0
 8000db8:	40016800 	.word	0x40016800
 8000dbc:	20000100 	.word	0x20000100
 8000dc0:	20003588 	.word	0x20003588
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	2000004c 	.word	0x2000004c

08000dcc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8000dcc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8000dd0:	4c21      	ldr	r4, [pc, #132]	; (8000e58 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000dd2:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000dd6:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8000dd8:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000ddc:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000dde:	4621      	mov	r1, r4
{
 8000de0:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000de6:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000de8:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8000dec:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 8000df0:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000df4:	f001 fd83 	bl	80028fe <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f9ab 	bl	8001154 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8000dfe:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000e00:	4621      	mov	r1, r4
 8000e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e06:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e08:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8000e0c:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 8000e10:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8000e14:	f001 fd73 	bl	80028fe <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000e18:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e20:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e22:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8000e26:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e2a:	f001 fd68 	bl	80028fe <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8000e2e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8000e32:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8000e34:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8000e36:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e38:	4621      	mov	r1, r4
 8000e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3e:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8000e40:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8000e44:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8000e46:	f001 fd5a 	bl	80028fe <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000e4a:	4649      	mov	r1, r9
 8000e4c:	4628      	mov	r0, r5
}
 8000e4e:	b002      	add	sp, #8
 8000e50:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8000e54:	f001 bd6a 	b.w	800292c <HAL_SDRAM_ProgramRefreshRate>
 8000e58:	2000018c 	.word	0x2000018c

08000e5c <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8000e5c:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000e5e:	4606      	mov	r6, r0
{
 8000e60:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8000e62:	2800      	cmp	r0, #0
 8000e64:	f000 80ad 	beq.w	8000fc2 <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e68:	4b57      	ldr	r3, [pc, #348]	; (8000fc8 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000e6a:	4858      	ldr	r0, [pc, #352]	; (8000fcc <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	9401      	str	r4, [sp, #4]
 8000e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e72:	f042 0201 	orr.w	r2, r2, #1
 8000e76:	639a      	str	r2, [r3, #56]	; 0x38
 8000e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e7a:	f002 0201 	and.w	r2, r2, #1
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8000e82:	9402      	str	r4, [sp, #8]
 8000e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e86:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e8e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000e92:	9202      	str	r2, [sp, #8]
 8000e94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	9403      	str	r4, [sp, #12]
 8000e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e9a:	f042 0202 	orr.w	r2, r2, #2
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea2:	f002 0202 	and.w	r2, r2, #2
 8000ea6:	9203      	str	r2, [sp, #12]
 8000ea8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	9404      	str	r4, [sp, #16]
 8000eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eae:	f042 0204 	orr.w	r2, r2, #4
 8000eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eb6:	f002 0204 	and.w	r2, r2, #4
 8000eba:	9204      	str	r2, [sp, #16]
 8000ebc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebe:	9405      	str	r4, [sp, #20]
 8000ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ec2:	f042 0208 	orr.w	r2, r2, #8
 8000ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eca:	f002 0208 	and.w	r2, r2, #8
 8000ece:	9205      	str	r2, [sp, #20]
 8000ed0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed2:	9406      	str	r4, [sp, #24]
 8000ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ed6:	f042 0210 	orr.w	r2, r2, #16
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
 8000edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ede:	f002 0210 	and.w	r2, r2, #16
 8000ee2:	9206      	str	r2, [sp, #24]
 8000ee4:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ee6:	9407      	str	r4, [sp, #28]
 8000ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eea:	f042 0220 	orr.w	r2, r2, #32
 8000eee:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ef2:	f002 0220 	and.w	r2, r2, #32
 8000ef6:	9207      	str	r2, [sp, #28]
 8000ef8:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000efa:	9408      	str	r4, [sp, #32]
 8000efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000efe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f02:	631a      	str	r2, [r3, #48]	; 0x30
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f0a:	9308      	str	r3, [sp, #32]
 8000f0c:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8000f10:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8000f14:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8000f16:	230c      	movs	r3, #12
 8000f18:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000f1a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000f1c:	2360      	movs	r3, #96	; 0x60
 8000f1e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8000f20:	f000 fba2 	bl	8001668 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000f24:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000f26:	482a      	ldr	r0, [pc, #168]	; (8000fd0 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8000f28:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8000f2a:	a909      	add	r1, sp, #36	; 0x24
 8000f2c:	f000 fb9c 	bl	8001668 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000f30:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8000f36:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000f38:	a909      	add	r1, sp, #36	; 0x24
 8000f3a:	f000 fb95 	bl	8001668 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000f3e:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000f42:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8000f44:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000f46:	a909      	add	r1, sp, #36	; 0x24
 8000f48:	f000 fb8e 	bl	8001668 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000f4c:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f50:	4822      	ldr	r0, [pc, #136]	; (8000fdc <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8000f52:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f54:	a909      	add	r1, sp, #36	; 0x24
 8000f56:	f000 fb87 	bl	8001668 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000f5a:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f5e:	4820      	ldr	r0, [pc, #128]	; (8000fe0 <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8000f60:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000f62:	a909      	add	r1, sp, #36	; 0x24
 8000f64:	f000 fb80 	bl	8001668 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000f68:	4b1e      	ldr	r3, [pc, #120]	; (8000fe4 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f70:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f74:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7c:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8000f80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8000f84:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8000f88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000f8c:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8000f8e:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8000f92:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8000f94:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <BSP_SDRAM_MspInit+0x18c>)
 8000f9a:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8000f9e:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8000fa0:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000fa2:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8000fa4:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8000fa6:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8000fa8:	f000 f9e6 	bl	8001378 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8000fac:	4628      	mov	r0, r5
 8000fae:	f000 f963 	bl	8001278 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8000fb2:	2038      	movs	r0, #56	; 0x38
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f000 f8f2 	bl	80011a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8000fbc:	2038      	movs	r0, #56	; 0x38
 8000fbe:	f000 f921 	bl	8001204 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8000fc2:	b00e      	add	sp, #56	; 0x38
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	2000018c 	.word	0x2000018c
 8000fe8:	40026410 	.word	0x40026410

08000fec <BSP_SDRAM_Init>:
{
 8000fec:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8000fee:	4c1b      	ldr	r4, [pc, #108]	; (800105c <BSP_SDRAM_Init+0x70>)
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <BSP_SDRAM_Init+0x74>)
 8000ff2:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 8000ff4:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 8000ffa:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 8000ffe:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001002:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001006:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 8001008:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800100c:	2301      	movs	r3, #1
 800100e:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001012:	2010      	movs	r0, #16
 8001014:	2340      	movs	r3, #64	; 0x40
 8001016:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800101a:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800101e:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001022:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001026:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800102a:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001032:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001034:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001036:	f7ff ff11 	bl	8000e5c <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800103a:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800103e:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001042:	f001 fc3c 	bl	80028be <HAL_SDRAM_Init>
 8001046:	4c07      	ldr	r4, [pc, #28]	; (8001064 <BSP_SDRAM_Init+0x78>)
 8001048:	3800      	subs	r0, #0
 800104a:	bf18      	it	ne
 800104c:	2001      	movne	r0, #1
 800104e:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001050:	f240 506a 	movw	r0, #1386	; 0x56a
 8001054:	f7ff feba 	bl	8000dcc <BSP_SDRAM_Initialization_sequence>
}
 8001058:	7820      	ldrb	r0, [r4, #0]
 800105a:	bd10      	pop	{r4, pc}
 800105c:	2000018c 	.word	0x2000018c
 8001060:	a0000140 	.word	0xa0000140
 8001064:	20000074 	.word	0x20000074

08001068 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001068:	490f      	ldr	r1, [pc, #60]	; (80010a8 <SystemInit+0x40>)
 800106a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800106e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <SystemInit+0x44>)
 8001078:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800107a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800107c:	f042 0201 	orr.w	r2, r2, #1
 8001080:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001082:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800108a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800108e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SystemInit+0x48>)
 8001092:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800109a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800109c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010a2:	608b      	str	r3, [r1, #8]
#endif
}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	40023800 	.word	0x40023800
 80010b0:	24003010 	.word	0x24003010

080010b4 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_InitTick+0x3c>)
 80010bc:	4e0e      	ldr	r6, [pc, #56]	; (80010f8 <HAL_InitTick+0x40>)
{
 80010be:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	7830      	ldrb	r0, [r6, #0]
 80010c6:	fbb3 f3f0 	udiv	r3, r3, r0
 80010ca:	6810      	ldr	r0, [r2, #0]
 80010cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80010d0:	f000 f8a6 	bl	8001220 <HAL_SYSTICK_Config>
 80010d4:	4604      	mov	r4, r0
 80010d6:	b950      	cbnz	r0, 80010ee <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d8:	2d0f      	cmp	r5, #15
 80010da:	d808      	bhi.n	80010ee <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010dc:	4602      	mov	r2, r0
 80010de:	4629      	mov	r1, r5
 80010e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010e4:	f000 f85c 	bl	80011a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e8:	6075      	str	r5, [r6, #4]
 80010ea:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80010ec:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
 80010f0:	e7fc      	b.n	80010ec <HAL_InitTick+0x34>
 80010f2:	bf00      	nop
 80010f4:	20000078 	.word	0x20000078
 80010f8:	2000007c 	.word	0x2000007c

080010fc <HAL_Init>:
{
 80010fc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_Init+0x30>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001106:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800110e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001116:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001118:	2003      	movs	r0, #3
 800111a:	f000 f82f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800111e:	200f      	movs	r0, #15
 8001120:	f7ff ffca 	bl	80010b8 <HAL_InitTick>
  HAL_MspInit();
 8001124:	f7ff ffc6 	bl	80010b4 <HAL_MspInit>
}
 8001128:	2000      	movs	r0, #0
 800112a:	bd08      	pop	{r3, pc}
 800112c:	40023c00 	.word	0x40023c00

08001130 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001130:	4a03      	ldr	r2, [pc, #12]	; (8001140 <HAL_IncTick+0x10>)
 8001132:	4b04      	ldr	r3, [pc, #16]	; (8001144 <HAL_IncTick+0x14>)
 8001134:	6811      	ldr	r1, [r2, #0]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	440b      	add	r3, r1
 800113a:	6013      	str	r3, [r2, #0]
}
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	2000358c 	.word	0x2000358c
 8001144:	2000007c 	.word	0x2000007c

08001148 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001148:	4b01      	ldr	r3, [pc, #4]	; (8001150 <HAL_GetTick+0x8>)
 800114a:	6818      	ldr	r0, [r3, #0]
}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	2000358c 	.word	0x2000358c

08001154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001154:	b538      	push	{r3, r4, r5, lr}
 8001156:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff fff6 	bl	8001148 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800115e:	bf1c      	itt	ne
 8001160:	4b05      	ldrne	r3, [pc, #20]	; (8001178 <HAL_Delay+0x24>)
 8001162:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001164:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001166:	bf18      	it	ne
 8001168:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116a:	f7ff ffed 	bl	8001148 <HAL_GetTick>
 800116e:	1b43      	subs	r3, r0, r5
 8001170:	42a3      	cmp	r3, r4
 8001172:	d3fa      	bcc.n	800116a <HAL_Delay+0x16>
  {
  }
}
 8001174:	bd38      	pop	{r3, r4, r5, pc}
 8001176:	bf00      	nop
 8001178:	2000007c 	.word	0x2000007c

0800117c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800117e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001180:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001184:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800118e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001198:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b530      	push	{r4, r5, lr}
 80011a4:	68dc      	ldr	r4, [r3, #12]
 80011a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011aa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b0:	2d04      	cmp	r5, #4
 80011b2:	bf28      	it	cs
 80011b4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011bc:	bf8c      	ite	hi
 80011be:	3c03      	subhi	r4, #3
 80011c0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c2:	fa03 f505 	lsl.w	r5, r3, r5
 80011c6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ca:	40a3      	lsls	r3, r4
 80011cc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80011d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	bfac      	ite	ge
 80011da:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	4a08      	ldrlt	r2, [pc, #32]	; (8001200 <HAL_NVIC_SetPriority+0x60>)
 80011e0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80011e4:	bfb8      	it	lt
 80011e6:	f000 000f 	andlt.w	r0, r0, #15
 80011ea:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	bfaa      	itet	ge
 80011ee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011f8:	bd30      	pop	{r4, r5, pc}
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	e000ed14 	.word	0xe000ed14

08001204 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001204:	2800      	cmp	r0, #0
 8001206:	db08      	blt.n	800121a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001208:	0942      	lsrs	r2, r0, #5
 800120a:	2301      	movs	r3, #1
 800120c:	f000 001f 	and.w	r0, r0, #31
 8001210:	fa03 f000 	lsl.w	r0, r3, r0
 8001214:	4b01      	ldr	r3, [pc, #4]	; (800121c <HAL_NVIC_EnableIRQ+0x18>)
 8001216:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100

08001220 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	3801      	subs	r0, #1
 8001222:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001226:	d20a      	bcs.n	800123e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122e:	21f0      	movs	r1, #240	; 0xf0
 8001230:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001236:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800123c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800123e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e010 	.word	0xe000e010
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800124c:	6803      	ldr	r3, [r0, #0]
{
 800124e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001250:	4c08      	ldr	r4, [pc, #32]	; (8001274 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001252:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001254:	b2d9      	uxtb	r1, r3
 8001256:	3910      	subs	r1, #16
 8001258:	2018      	movs	r0, #24
 800125a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800125e:	5c20      	ldrb	r0, [r4, r0]
 8001260:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001262:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001266:	f020 0003 	bic.w	r0, r0, #3
 800126a:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800126c:	bf88      	it	hi
 800126e:	3004      	addhi	r0, #4
 8001270:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001272:	bd10      	pop	{r4, pc}
 8001274:	08007578 	.word	0x08007578

08001278 <HAL_DMA_Init>:
{
 8001278:	b570      	push	{r4, r5, r6, lr}
 800127a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ff64 	bl	8001148 <HAL_GetTick>
 8001280:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001282:	2c00      	cmp	r4, #0
 8001284:	d073      	beq.n	800136e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001286:	2302      	movs	r3, #2
 8001288:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800128c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800128e:	2300      	movs	r3, #0
 8001290:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001294:	6813      	ldr	r3, [r2, #0]
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129c:	6821      	ldr	r1, [r4, #0]
 800129e:	680b      	ldr	r3, [r1, #0]
 80012a0:	07d8      	lsls	r0, r3, #31
 80012a2:	d42f      	bmi.n	8001304 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80012a4:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012a6:	4d33      	ldr	r5, [pc, #204]	; (8001374 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a8:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012aa:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ac:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	68e2      	ldr	r2, [r4, #12]
 80012b4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b6:	6922      	ldr	r2, [r4, #16]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6962      	ldr	r2, [r4, #20]
 80012bc:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012be:	69e2      	ldr	r2, [r4, #28]
 80012c0:	4303      	orrs	r3, r0
 80012c2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c4:	6a22      	ldr	r2, [r4, #32]
 80012c6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012ca:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012cc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d0:	bf02      	ittt	eq
 80012d2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80012d6:	4335      	orreq	r5, r6
 80012d8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80012da:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80012dc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012de:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80012e4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012e8:	d133      	bne.n	8001352 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80012ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ec:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80012ee:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012f0:	b37d      	cbz	r5, 8001352 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012f2:	b990      	cbnz	r0, 800131a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80012f4:	2a01      	cmp	r2, #1
 80012f6:	d021      	beq.n	800133c <HAL_DMA_Init+0xc4>
 80012f8:	f032 0202 	bics.w	r2, r2, #2
 80012fc:	d129      	bne.n	8001352 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012fe:	01ea      	lsls	r2, r5, #7
 8001300:	d527      	bpl.n	8001352 <HAL_DMA_Init+0xda>
 8001302:	e01e      	b.n	8001342 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001304:	f7ff ff20 	bl	8001148 <HAL_GetTick>
 8001308:	1b40      	subs	r0, r0, r5
 800130a:	2805      	cmp	r0, #5
 800130c:	d9c6      	bls.n	800129c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130e:	2320      	movs	r3, #32
 8001310:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001312:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001314:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001318:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800131a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800131e:	d114      	bne.n	800134a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001320:	2a03      	cmp	r2, #3
 8001322:	d816      	bhi.n	8001352 <HAL_DMA_Init+0xda>
 8001324:	a001      	add	r0, pc, #4	; (adr r0, 800132c <HAL_DMA_Init+0xb4>)
 8001326:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800132a:	bf00      	nop
 800132c:	08001343 	.word	0x08001343
 8001330:	080012ff 	.word	0x080012ff
 8001334:	08001343 	.word	0x08001343
 8001338:	0800133d 	.word	0x0800133d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800133c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001340:	d107      	bne.n	8001352 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001342:	2340      	movs	r3, #64	; 0x40
 8001344:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001346:	2001      	movs	r0, #1
 8001348:	e7e4      	b.n	8001314 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800134a:	2a02      	cmp	r2, #2
 800134c:	d9f9      	bls.n	8001342 <HAL_DMA_Init+0xca>
 800134e:	2a03      	cmp	r2, #3
 8001350:	d0d5      	beq.n	80012fe <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001352:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ff79 	bl	800124c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800135c:	233f      	movs	r3, #63	; 0x3f
 800135e:	4093      	lsls	r3, r2
 8001360:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001362:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001364:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001366:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001368:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800136c:	e7d4      	b.n	8001318 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800136e:	2001      	movs	r0, #1
 8001370:	e7d2      	b.n	8001318 <HAL_DMA_Init+0xa0>
 8001372:	bf00      	nop
 8001374:	f010803f 	.word	0xf010803f

08001378 <HAL_DMA_DeInit>:
{
 8001378:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800137a:	4605      	mov	r5, r0
 800137c:	b320      	cbz	r0, 80013c8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800137e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001382:	2b02      	cmp	r3, #2
 8001384:	b2dc      	uxtb	r4, r3
 8001386:	d01d      	beq.n	80013c4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8001388:	6803      	ldr	r3, [r0, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8001390:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8001392:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8001394:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001396:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001398:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800139a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800139c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800139e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80013a0:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013a2:	f7ff ff53 	bl	800124c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80013a8:	233f      	movs	r3, #63	; 0x3f
 80013aa:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80013ac:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80013b0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80013b4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ba:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80013bc:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80013c0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 80013c4:	4620      	mov	r0, r4
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013c8:	2401      	movs	r4, #1
 80013ca:	e7fb      	b.n	80013c4 <HAL_DMA_DeInit+0x4c>

080013cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80013cc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80013ce:	6804      	ldr	r4, [r0, #0]
 80013d0:	9d04      	ldr	r5, [sp, #16]
 80013d2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80013d4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80013d8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80013dc:	4333      	orrs	r3, r6
 80013de:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80013e0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80013e2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80013e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80013e8:	d130      	bne.n	800144c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80013ea:	6886      	ldr	r6, [r0, #8]
 80013ec:	b11e      	cbz	r6, 80013f6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80013ee:	2e01      	cmp	r6, #1
 80013f0:	d103      	bne.n	80013fa <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80013f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80013f6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80013f8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80013fa:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80013fc:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001400:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001404:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001406:	d107      	bne.n	8001418 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8001408:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 800140a:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800140c:	02db      	lsls	r3, r3, #11
 800140e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8001412:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8001416:	e7ee      	b.n	80013f6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001418:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800141a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800141e:	d10a      	bne.n	8001436 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8001420:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8001422:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001424:	029b      	lsls	r3, r3, #10
 8001426:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800142a:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800142e:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001430:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8001434:	e7df      	b.n	80013f6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8001436:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8001438:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800143a:	0209      	lsls	r1, r1, #8
 800143c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8001440:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8001444:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001446:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800144a:	e7d4      	b.n	80013f6 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800144c:	60e1      	str	r1, [r4, #12]
}
 800144e:	e7d3      	b.n	80013f8 <DMA2D_SetConfig+0x2c>

08001450 <HAL_DMA2D_MspInit>:
}
 8001450:	4770      	bx	lr

08001452 <HAL_DMA2D_Init>:
{
 8001452:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8001454:	4604      	mov	r4, r0
 8001456:	b330      	cbz	r0, 80014a6 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001458:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800145c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001460:	b91b      	cbnz	r3, 800146a <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8001462:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8001466:	f7ff fff3 	bl	8001450 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800146a:	6822      	ldr	r2, [r4, #0]
 800146c:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800146e:	2302      	movs	r3, #2
 8001470:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001474:	6813      	ldr	r3, [r2, #0]
 8001476:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800147a:	430b      	orrs	r3, r1
 800147c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800147e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8001480:	68a1      	ldr	r1, [r4, #8]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	430b      	orrs	r3, r1
 8001488:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800148a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800148c:	68e1      	ldr	r1, [r4, #12]
 800148e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001492:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001496:	430b      	orrs	r3, r1
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800149a:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800149c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800149e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80014a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80014a4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014a6:	2001      	movs	r0, #1
 80014a8:	e7fc      	b.n	80014a4 <HAL_DMA2D_Init+0x52>

080014aa <HAL_DMA2D_Start>:
{
 80014aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80014ac:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 80014b0:	2d01      	cmp	r5, #1
{
 80014b2:	4604      	mov	r4, r0
 80014b4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 80014b8:	d00f      	beq.n	80014da <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80014ba:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80014be:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80014c0:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80014c2:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80014c6:	9500      	str	r5, [sp, #0]
 80014c8:	f7ff ff80 	bl	80013cc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	4333      	orrs	r3, r6
 80014d2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80014d4:	2000      	movs	r0, #0
}
 80014d6:	b002      	add	sp, #8
 80014d8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80014da:	4628      	mov	r0, r5
 80014dc:	e7fb      	b.n	80014d6 <HAL_DMA2D_Start+0x2c>

080014de <HAL_DMA2D_PollForTransfer>:
{
 80014de:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80014e4:	6803      	ldr	r3, [r0, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	07db      	lsls	r3, r3, #31
{
 80014ea:	4604      	mov	r4, r0
 80014ec:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80014ee:	d417      	bmi.n	8001520 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80014f0:	6822      	ldr	r2, [r4, #0]
 80014f2:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80014f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80014f6:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80014f8:	069e      	lsls	r6, r3, #26
 80014fa:	d506      	bpl.n	800150a <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80014fc:	f7ff fe24 	bl	8001148 <HAL_GetTick>
 8001500:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	06d2      	lsls	r2, r2, #27
 8001508:	d543      	bpl.n	8001592 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800150a:	6823      	ldr	r3, [r4, #0]
 800150c:	2212      	movs	r2, #18
 800150e:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001510:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001512:	2301      	movs	r3, #1
 8001514:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001518:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800151c:	b002      	add	sp, #8
 800151e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8001520:	f7ff fe12 	bl	8001148 <HAL_GetTick>
 8001524:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	0792      	lsls	r2, r2, #30
 800152c:	d4e0      	bmi.n	80014f0 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001532:	9a01      	ldr	r2, [sp, #4]
 8001534:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001538:	d017      	beq.n	800156a <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800153a:	9a01      	ldr	r2, [sp, #4]
 800153c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800153e:	bf42      	ittt	mi
 8001540:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001542:	f042 0202 	orrmi.w	r2, r2, #2
 8001546:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001548:	9a01      	ldr	r2, [sp, #4]
 800154a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800154c:	bf42      	ittt	mi
 800154e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8001550:	f042 0201 	orrmi.w	r2, r2, #1
 8001554:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001556:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001558:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800155a:	2304      	movs	r3, #4
 800155c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8001560:	2300      	movs	r3, #0
 8001562:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8001566:	2001      	movs	r0, #1
 8001568:	e7d8      	b.n	800151c <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 800156a:	1c69      	adds	r1, r5, #1
 800156c:	d0dc      	beq.n	8001528 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800156e:	f7ff fdeb 	bl	8001148 <HAL_GetTick>
 8001572:	1b80      	subs	r0, r0, r6
 8001574:	42a8      	cmp	r0, r5
 8001576:	d801      	bhi.n	800157c <HAL_DMA2D_PollForTransfer+0x9e>
 8001578:	2d00      	cmp	r5, #0
 800157a:	d1d4      	bne.n	8001526 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800157c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800157e:	f043 0320 	orr.w	r3, r3, #32
 8001582:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001584:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001586:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001588:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800158c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8001590:	e7c4      	b.n	800151c <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8001596:	9a01      	ldr	r2, [sp, #4]
 8001598:	f012 0f29 	tst.w	r2, #41	; 0x29
 800159c:	d016      	beq.n	80015cc <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800159e:	9a01      	ldr	r2, [sp, #4]
 80015a0:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80015a2:	bf42      	ittt	mi
 80015a4:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015a6:	f042 0204 	orrmi.w	r2, r2, #4
 80015aa:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80015ac:	9a01      	ldr	r2, [sp, #4]
 80015ae:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80015b0:	bf42      	ittt	mi
 80015b2:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015b4:	f042 0202 	orrmi.w	r2, r2, #2
 80015b8:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80015ba:	9a01      	ldr	r2, [sp, #4]
 80015bc:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80015be:	bf42      	ittt	mi
 80015c0:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80015c2:	f042 0201 	orrmi.w	r2, r2, #1
 80015c6:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80015c8:	2229      	movs	r2, #41	; 0x29
 80015ca:	e7c5      	b.n	8001558 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 80015cc:	1c69      	adds	r1, r5, #1
 80015ce:	d099      	beq.n	8001504 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fdba 	bl	8001148 <HAL_GetTick>
 80015d4:	1b80      	subs	r0, r0, r6
 80015d6:	42a8      	cmp	r0, r5
 80015d8:	d8d0      	bhi.n	800157c <HAL_DMA2D_PollForTransfer+0x9e>
 80015da:	2d00      	cmp	r5, #0
 80015dc:	d191      	bne.n	8001502 <HAL_DMA2D_PollForTransfer+0x24>
 80015de:	e7cd      	b.n	800157c <HAL_DMA2D_PollForTransfer+0x9e>

080015e0 <HAL_DMA2D_ConfigLayer>:
{
 80015e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80015e2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	f04f 0302 	mov.w	r3, #2
 80015ec:	d02b      	beq.n	8001646 <HAL_DMA2D_ConfigLayer+0x66>
 80015ee:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80015f0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80015f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80015f8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80015fc:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8001600:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8001602:	4f18      	ldr	r7, [pc, #96]	; (8001664 <HAL_DMA2D_ConfigLayer+0x84>)
 8001604:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001608:	3c09      	subs	r4, #9
 800160a:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800160c:	bf9c      	itt	ls
 800160e:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8001612:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001614:	ea4f 1601 	mov.w	r6, r1, lsl #4
 8001618:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800161a:	bf88      	it	hi
 800161c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001620:	b999      	cbnz	r1, 800164a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001622:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001624:	4039      	ands	r1, r7
 8001626:	430a      	orrs	r2, r1
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800162a:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800162c:	6982      	ldr	r2, [r0, #24]
 800162e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001630:	d803      	bhi.n	800163a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001632:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001634:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800163a:	2301      	movs	r3, #1
 800163c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8001640:	2300      	movs	r3, #0
 8001642:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8001646:	4618      	mov	r0, r3
}
 8001648:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800164a:	69d9      	ldr	r1, [r3, #28]
 800164c:	4039      	ands	r1, r7
 800164e:	430a      	orrs	r2, r1
 8001650:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001652:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001654:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001656:	6992      	ldr	r2, [r2, #24]
 8001658:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800165a:	bf9c      	itt	ls
 800165c:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8001660:	621d      	strls	r5, [r3, #32]
 8001662:	e7ea      	b.n	800163a <HAL_DMA2D_ConfigLayer+0x5a>
 8001664:	00fcfff0 	.word	0x00fcfff0

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8001830 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4a6d      	ldr	r2, [pc, #436]	; (8001828 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001674:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001676:	2401      	movs	r4, #1
 8001678:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800167e:	43ac      	bics	r4, r5
 8001680:	f040 80b9 	bne.w	80017f6 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001684:	684d      	ldr	r5, [r1, #4]
 8001686:	f005 0403 	and.w	r4, r5, #3
 800168a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800168e:	2603      	movs	r6, #3
 8001690:	1e67      	subs	r7, r4, #1
 8001692:	fa06 f608 	lsl.w	r6, r6, r8
 8001696:	2f01      	cmp	r7, #1
 8001698:	ea6f 0606 	mvn.w	r6, r6
 800169c:	d834      	bhi.n	8001708 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800169e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a4:	68cf      	ldr	r7, [r1, #12]
 80016a6:	fa07 f708 	lsl.w	r7, r7, r8
 80016aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80016ae:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016b0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80016ba:	409f      	lsls	r7, r3
 80016bc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016c0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80016c2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	688f      	ldr	r7, [r1, #8]
 80016ca:	fa07 f708 	lsl.w	r7, r7, r8
 80016ce:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80016d4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	d119      	bne.n	800170c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80016d8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80016dc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80016ec:	f04f 0e0f 	mov.w	lr, #15
 80016f0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80016f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016f8:	690f      	ldr	r7, [r1, #16]
 80016fa:	fa07 f70b 	lsl.w	r7, r7, fp
 80016fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001702:	f8ca 7020 	str.w	r7, [sl, #32]
 8001706:	e001      	b.n	800170c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001708:	2c03      	cmp	r4, #3
 800170a:	d1da      	bne.n	80016c2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800170c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001712:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001714:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001716:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800171a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800171c:	d06b      	beq.n	80017f6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	f04f 0a00 	mov.w	sl, #0
 8001722:	f8cd a004 	str.w	sl, [sp, #4]
 8001726:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	4c40      	ldr	r4, [pc, #256]	; (800182c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001730:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001734:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001738:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800173c:	9601      	str	r6, [sp, #4]
 800173e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001740:	f023 0603 	bic.w	r6, r3, #3
 8001744:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001748:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800174c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001750:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001754:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001758:	270f      	movs	r7, #15
 800175a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800175e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001760:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001764:	d04e      	beq.n	8001804 <HAL_GPIO_Init+0x19c>
 8001766:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800176a:	42a0      	cmp	r0, r4
 800176c:	d04c      	beq.n	8001808 <HAL_GPIO_Init+0x1a0>
 800176e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001772:	42a0      	cmp	r0, r4
 8001774:	d04a      	beq.n	800180c <HAL_GPIO_Init+0x1a4>
 8001776:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800177a:	42a0      	cmp	r0, r4
 800177c:	d048      	beq.n	8001810 <HAL_GPIO_Init+0x1a8>
 800177e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001782:	42a0      	cmp	r0, r4
 8001784:	d046      	beq.n	8001814 <HAL_GPIO_Init+0x1ac>
 8001786:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800178a:	42a0      	cmp	r0, r4
 800178c:	d044      	beq.n	8001818 <HAL_GPIO_Init+0x1b0>
 800178e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001792:	42a0      	cmp	r0, r4
 8001794:	d042      	beq.n	800181c <HAL_GPIO_Init+0x1b4>
 8001796:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800179a:	42a0      	cmp	r0, r4
 800179c:	d040      	beq.n	8001820 <HAL_GPIO_Init+0x1b8>
 800179e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017a2:	42a0      	cmp	r0, r4
 80017a4:	d03e      	beq.n	8001824 <HAL_GPIO_Init+0x1bc>
 80017a6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017aa:	42a0      	cmp	r0, r4
 80017ac:	bf0c      	ite	eq
 80017ae:	2409      	moveq	r4, #9
 80017b0:	240a      	movne	r4, #10
 80017b2:	fa04 f40e 	lsl.w	r4, r4, lr
 80017b6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017b8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80017ba:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80017bc:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80017c2:	bf54      	ite	pl
 80017c4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017c6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80017ca:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80017cc:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ce:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80017d0:	bf54      	ite	pl
 80017d2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017d4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80017d8:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017da:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017dc:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80017de:	bf54      	ite	pl
 80017e0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017e2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80017e6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80017e8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ea:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80017ec:	bf54      	ite	pl
 80017ee:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80017f0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80017f4:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	3301      	adds	r3, #1
 80017f8:	2b10      	cmp	r3, #16
 80017fa:	f47f af3b 	bne.w	8001674 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80017fe:	b003      	add	sp, #12
 8001800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001804:	4654      	mov	r4, sl
 8001806:	e7d4      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001808:	2401      	movs	r4, #1
 800180a:	e7d2      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 800180c:	2402      	movs	r4, #2
 800180e:	e7d0      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001810:	2403      	movs	r4, #3
 8001812:	e7ce      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001814:	2404      	movs	r4, #4
 8001816:	e7cc      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001818:	2405      	movs	r4, #5
 800181a:	e7ca      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 800181c:	2406      	movs	r4, #6
 800181e:	e7c8      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001820:	2407      	movs	r4, #7
 8001822:	e7c6      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001824:	2408      	movs	r4, #8
 8001826:	e7c4      	b.n	80017b2 <HAL_GPIO_Init+0x14a>
 8001828:	40013c00 	.word	0x40013c00
 800182c:	40020000 	.word	0x40020000
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001834:	6903      	ldr	r3, [r0, #16]
 8001836:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001838:	bf14      	ite	ne
 800183a:	2001      	movne	r0, #1
 800183c:	2000      	moveq	r0, #0
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001840:	b10a      	cbz	r2, 8001846 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001842:	6181      	str	r1, [r0, #24]
  }
}
 8001844:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	0409      	lsls	r1, r1, #16
 8001848:	e7fb      	b.n	8001842 <HAL_GPIO_WritePin+0x2>

0800184a <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800184a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800184e:	f8d0 9000 	ldr.w	r9, [r0]
{
 8001852:	b085      	sub	sp, #20
 8001854:	4605      	mov	r5, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001856:	4648      	mov	r0, r9
 8001858:	f001 fd8f 	bl	800337a <USB_GetMode>
 800185c:	2801      	cmp	r0, #1
 800185e:	f040 80f6 	bne.w	8001a4e <HAL_HCD_IRQHandler+0x204>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001862:	6828      	ldr	r0, [r5, #0]
 8001864:	f001 fd85 	bl	8003372 <USB_ReadInterrupts>
 8001868:	2800      	cmp	r0, #0
 800186a:	f000 80f0 	beq.w	8001a4e <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800186e:	6828      	ldr	r0, [r5, #0]
 8001870:	f001 fd7f 	bl	8003372 <USB_ReadInterrupts>
 8001874:	0281      	lsls	r1, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001876:	bf48      	it	mi
 8001878:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800187a:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800187c:	bf44      	itt	mi
 800187e:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8001882:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001884:	f001 fd75 	bl	8003372 <USB_ReadInterrupts>
 8001888:	02c2      	lsls	r2, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800188a:	bf48      	it	mi
 800188c:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800188e:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001890:	bf44      	itt	mi
 8001892:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 8001896:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001898:	f001 fd6b 	bl	8003372 <USB_ReadInterrupts>
 800189c:	0143      	lsls	r3, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800189e:	bf48      	it	mi
 80018a0:	682b      	ldrmi	r3, [r5, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018a2:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018a4:	bf44      	itt	mi
 80018a6:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 80018aa:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018ac:	f001 fd61 	bl	8003372 <USB_ReadInterrupts>
 80018b0:	0787      	lsls	r7, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018b2:	bf48      	it	mi
 80018b4:	682b      	ldrmi	r3, [r5, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018b6:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018b8:	bf44      	itt	mi
 80018ba:	2202      	movmi	r2, #2
 80018bc:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018be:	f001 fd58 	bl	8003372 <USB_ReadInterrupts>
 80018c2:	0086      	lsls	r6, r0, #2
 80018c4:	d515      	bpl.n	80018f2 <HAL_HCD_IRQHandler+0xa8>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018c6:	682b      	ldr	r3, [r5, #0]
 80018c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80018cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018ce:	f8d9 3440 	ldr.w	r3, [r9, #1088]	; 0x440
 80018d2:	07dc      	lsls	r4, r3, #31
 80018d4:	d40d      	bmi.n	80018f2 <HAL_HCD_IRQHandler+0xa8>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80018d6:	2110      	movs	r1, #16
 80018d8:	4648      	mov	r0, r9
 80018da:	f001 fcf9 	bl	80032d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80018de:	4648      	mov	r0, r9
 80018e0:	f001 fd0e 	bl	8003300 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80018e4:	6828      	ldr	r0, [r5, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	f001 fd4b 	bl	8003382 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80018ec:	4628      	mov	r0, r5
 80018ee:	f001 ff35 	bl	800375c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018f2:	6828      	ldr	r0, [r5, #0]
 80018f4:	f001 fd3d 	bl	8003372 <USB_ReadInterrupts>
 80018f8:	01c0      	lsls	r0, r0, #7
 80018fa:	d53d      	bpl.n	8001978 <HAL_HCD_IRQHandler+0x12e>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018fc:	682c      	ldr	r4, [r5, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80018fe:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001902:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8001904:	f8d4 3440 	ldr.w	r3, [r4, #1088]	; 0x440
 8001908:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800190a:	9b03      	ldr	r3, [sp, #12]
 800190c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001910:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001912:	9b02      	ldr	r3, [sp, #8]
 8001914:	0799      	lsls	r1, r3, #30
 8001916:	d509      	bpl.n	800192c <HAL_HCD_IRQHandler+0xe2>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001918:	9b02      	ldr	r3, [sp, #8]
 800191a:	07da      	lsls	r2, r3, #31
 800191c:	d502      	bpl.n	8001924 <HAL_HCD_IRQHandler+0xda>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800191e:	4628      	mov	r0, r5
 8001920:	f001 ff18 	bl	8003754 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8001924:	9b03      	ldr	r3, [sp, #12]
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800192c:	9b02      	ldr	r3, [sp, #8]
 800192e:	071b      	lsls	r3, r3, #28
 8001930:	d518      	bpl.n	8001964 <HAL_HCD_IRQHandler+0x11a>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	f043 0308 	orr.w	r3, r3, #8
 8001938:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800193a:	9b02      	ldr	r3, [sp, #8]
 800193c:	075f      	lsls	r7, r3, #29
 800193e:	f140 8091 	bpl.w	8001a64 <HAL_HCD_IRQHandler+0x21a>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001942:	69a9      	ldr	r1, [r5, #24]
 8001944:	2902      	cmp	r1, #2
 8001946:	f040 8085 	bne.w	8001a54 <HAL_HCD_IRQHandler+0x20a>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800194a:	9b02      	ldr	r3, [sp, #8]
 800194c:	6828      	ldr	r0, [r5, #0]
 800194e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001952:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001956:	bf18      	it	ne
 8001958:	2101      	movne	r1, #1
 800195a:	f001 fd12 	bl	8003382 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800195e:	4628      	mov	r0, r5
 8001960:	f001 ff00 	bl	8003764 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001964:	9b02      	ldr	r3, [sp, #8]
 8001966:	069e      	lsls	r6, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001968:	bf42      	ittt	mi
 800196a:	9b03      	ldrmi	r3, [sp, #12]
 800196c:	f043 0320 	orrmi.w	r3, r3, #32
 8001970:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001972:	9b03      	ldr	r3, [sp, #12]
 8001974:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001978:	6828      	ldr	r0, [r5, #0]
 800197a:	f001 fcfa 	bl	8003372 <USB_ReadInterrupts>
 800197e:	0704      	lsls	r4, r0, #28
 8001980:	d505      	bpl.n	800198e <HAL_HCD_IRQHandler+0x144>
      HAL_HCD_SOF_Callback(hhcd);
 8001982:	4628      	mov	r0, r5
 8001984:	f001 fee2 	bl	800374c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	2208      	movs	r2, #8
 800198c:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800198e:	6828      	ldr	r0, [r5, #0]
 8001990:	f001 fcef 	bl	8003372 <USB_ReadInterrupts>
 8001994:	06c0      	lsls	r0, r0, #27
 8001996:	d542      	bpl.n	8001a1e <HAL_HCD_IRQHandler+0x1d4>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001998:	682e      	ldr	r6, [r5, #0]
 800199a:	69b3      	ldr	r3, [r6, #24]
 800199c:	f023 0310 	bic.w	r3, r3, #16
 80019a0:	61b3      	str	r3, [r6, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 80019a2:	6a37      	ldr	r7, [r6, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80019a4:	f3c7 4343 	ubfx	r3, r7, #17, #4
  switch (pktsts)
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d133      	bne.n	8001a14 <HAL_HCD_IRQHandler+0x1ca>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019ac:	f3c7 180a 	ubfx	r8, r7, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80019b0:	f1b8 0f00 	cmp.w	r8, #0
 80019b4:	d02e      	beq.n	8001a14 <HAL_HCD_IRQHandler+0x1ca>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80019b6:	f007 070f 	and.w	r7, r7, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80019ba:	242c      	movs	r4, #44	; 0x2c
 80019bc:	fb04 5407 	mla	r4, r4, r7, r5
 80019c0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80019c2:	b339      	cbz	r1, 8001a14 <HAL_HCD_IRQHandler+0x1ca>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80019c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80019c6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80019c8:	4443      	add	r3, r8
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d84e      	bhi.n	8001a6c <HAL_HCD_IRQHandler+0x222>
          (void)USB_ReadPacket(hhcd->Instance,
 80019ce:	4642      	mov	r2, r8
 80019d0:	4630      	mov	r0, r6
 80019d2:	f001 fcab 	bl	800332c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80019d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80019d8:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80019dc:	4443      	add	r3, r8
 80019de:	6463      	str	r3, [r4, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80019e0:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80019e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80019e6:	017a      	lsls	r2, r7, #5
 80019e8:	eb06 1747 	add.w	r7, r6, r7, lsl #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80019ec:	4443      	add	r3, r8
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80019ee:	4588      	cmp	r8, r1
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80019f0:	6523      	str	r3, [r4, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80019f2:	693b      	ldr	r3, [r7, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80019f4:	d10e      	bne.n	8001a14 <HAL_HCD_IRQHandler+0x1ca>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80019f6:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80019fa:	b15b      	cbz	r3, 8001a14 <HAL_HCD_IRQHandler+0x1ca>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80019fc:	5993      	ldr	r3, [r2, r6]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80019fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001a02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001a06:	5193      	str	r3, [r2, r6]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a08:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8001a0c:	f083 0301 	eor.w	r3, r3, #1
 8001a10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a14:	682a      	ldr	r2, [r5, #0]
 8001a16:	6993      	ldr	r3, [r2, #24]
 8001a18:	f043 0310 	orr.w	r3, r3, #16
 8001a1c:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a1e:	6828      	ldr	r0, [r5, #0]
 8001a20:	f001 fca7 	bl	8003372 <USB_ReadInterrupts>
 8001a24:	0181      	lsls	r1, r0, #6
 8001a26:	d512      	bpl.n	8001a4e <HAL_HCD_IRQHandler+0x204>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a28:	6828      	ldr	r0, [r5, #0]
 8001a2a:	f001 fcc6 	bl	80033ba <USB_HC_ReadInterrupt>
 8001a2e:	f509 63a0 	add.w	r3, r9, #1280	; 0x500
 8001a32:	9000      	str	r0, [sp, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a34:	f04f 0a00 	mov.w	sl, #0
 8001a38:	9301      	str	r3, [sp, #4]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a3a:	272c      	movs	r7, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001a3c:	f04f 0802 	mov.w	r8, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a40:	68ab      	ldr	r3, [r5, #8]
 8001a42:	6828      	ldr	r0, [r5, #0]
 8001a44:	4553      	cmp	r3, sl
 8001a46:	d815      	bhi.n	8001a74 <HAL_HCD_IRQHandler+0x22a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001a48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a4c:	6143      	str	r3, [r0, #20]
}
 8001a4e:	b005      	add	sp, #20
 8001a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001a54:	68eb      	ldr	r3, [r5, #12]
 8001a56:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8001a58:	bf04      	itt	eq
 8001a5a:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8001a5e:	f8c4 2404 	streq.w	r2, [r4, #1028]	; 0x404
 8001a62:	e77c      	b.n	800195e <HAL_HCD_IRQHandler+0x114>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001a64:	4628      	mov	r0, r5
 8001a66:	f001 fe81 	bl	800376c <HAL_HCD_PortDisabled_Callback>
 8001a6a:	e77b      	b.n	8001964 <HAL_HCD_IRQHandler+0x11a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8001a72:	e7cf      	b.n	8001a14 <HAL_HCD_IRQHandler+0x1ca>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a74:	9a00      	ldr	r2, [sp, #0]
 8001a76:	f00a 030f 	and.w	r3, sl, #15
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	07da      	lsls	r2, r3, #31
 8001a80:	f140 80af 	bpl.w	8001be2 <HAL_HCD_IRQHandler+0x398>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a84:	9a01      	ldr	r2, [sp, #4]
 8001a86:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8001a8a:	fa5f f68a 	uxtb.w	r6, sl
 8001a8e:	58d1      	ldr	r1, [r2, r3]
 8001a90:	f500 6ba0 	add.w	fp, r0, #1280	; 0x500
 8001a94:	eb0b 1446 	add.w	r4, fp, r6, lsl #5
 8001a98:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8001a9c:	ea4f 1946 	mov.w	r9, r6, lsl #5
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001aa0:	68a1      	ldr	r1, [r4, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001aa2:	f000 811c 	beq.w	8001cde <HAL_HCD_IRQHandler+0x494>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001aa6:	074b      	lsls	r3, r1, #29
 8001aa8:	d513      	bpl.n	8001ad2 <HAL_HCD_IRQHandler+0x288>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001aaa:	2104      	movs	r1, #4
 8001aac:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aae:	68e1      	ldr	r1, [r4, #12]
 8001ab0:	f041 0102 	orr.w	r1, r1, #2
 8001ab4:	60e1      	str	r1, [r4, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001ab6:	68a1      	ldr	r1, [r4, #8]
 8001ab8:	058b      	lsls	r3, r1, #22
 8001aba:	d55a      	bpl.n	8001b72 <HAL_HCD_IRQHandler+0x328>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001abc:	68e3      	ldr	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001abe:	6828      	ldr	r0, [r5, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ac0:	f043 0302 	orr.w	r3, r3, #2
 8001ac4:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac6:	4631      	mov	r1, r6
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ac8:	f001 fc7c 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ad0:	e0f8      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x47a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001ad2:	68a1      	ldr	r1, [r4, #8]
 8001ad4:	05c9      	lsls	r1, r1, #23
 8001ad6:	d510      	bpl.n	8001afa <HAL_HCD_IRQHandler+0x2b0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001ad8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001adc:	60a1      	str	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001ade:	fb07 5106 	mla	r1, r7, r6, r5
 8001ae2:	f04f 0c07 	mov.w	ip, #7
 8001ae6:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aea:	68e1      	ldr	r1, [r4, #12]
 8001aec:	f041 0102 	orr.w	r1, r1, #2
 8001af0:	60e1      	str	r1, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001af2:	4631      	mov	r1, r6
 8001af4:	f001 fc66 	bl	80033c4 <USB_HC_Halt>
 8001af8:	e7dd      	b.n	8001ab6 <HAL_HCD_IRQHandler+0x26c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001afa:	68a1      	ldr	r1, [r4, #8]
 8001afc:	068a      	lsls	r2, r1, #26
 8001afe:	d502      	bpl.n	8001b06 <HAL_HCD_IRQHandler+0x2bc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b00:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b02:	60a1      	str	r1, [r4, #8]
 8001b04:	e7d7      	b.n	8001ab6 <HAL_HCD_IRQHandler+0x26c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b06:	68a1      	ldr	r1, [r4, #8]
 8001b08:	070b      	lsls	r3, r1, #28
 8001b0a:	d50e      	bpl.n	8001b2a <HAL_HCD_IRQHandler+0x2e0>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b0c:	68e1      	ldr	r1, [r4, #12]
 8001b0e:	f041 0102 	orr.w	r1, r1, #2
 8001b12:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001b14:	fb07 5106 	mla	r1, r7, r6, r5
 8001b18:	f04f 0c05 	mov.w	ip, #5
 8001b1c:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b20:	2110      	movs	r1, #16
 8001b22:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b24:	2108      	movs	r1, #8
 8001b26:	60a1      	str	r1, [r4, #8]
 8001b28:	e7e3      	b.n	8001af2 <HAL_HCD_IRQHandler+0x2a8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b2a:	68a1      	ldr	r1, [r4, #8]
 8001b2c:	0549      	lsls	r1, r1, #21
 8001b2e:	d50e      	bpl.n	8001b4e <HAL_HCD_IRQHandler+0x304>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b30:	68e1      	ldr	r1, [r4, #12]
 8001b32:	f041 0102 	orr.w	r1, r1, #2
 8001b36:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b38:	fb07 5106 	mla	r1, r7, r6, r5
 8001b3c:	f04f 0c08 	mov.w	ip, #8
 8001b40:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b44:	2110      	movs	r1, #16
 8001b46:	60a1      	str	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001b48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4c:	e7eb      	b.n	8001b26 <HAL_HCD_IRQHandler+0x2dc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001b4e:	68a1      	ldr	r1, [r4, #8]
 8001b50:	060a      	lsls	r2, r1, #24
 8001b52:	d5b0      	bpl.n	8001ab6 <HAL_HCD_IRQHandler+0x26c>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b54:	68e1      	ldr	r1, [r4, #12]
 8001b56:	f041 0102 	orr.w	r1, r1, #2
 8001b5a:	60e1      	str	r1, [r4, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001b5c:	fb07 5106 	mla	r1, r7, r6, r5
 8001b60:	f04f 0c06 	mov.w	ip, #6
 8001b64:	f881 c061 	strb.w	ip, [r1, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b68:	4631      	mov	r1, r6
 8001b6a:	f001 fc2b 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001b6e:	2180      	movs	r1, #128	; 0x80
 8001b70:	e7c7      	b.n	8001b02 <HAL_HCD_IRQHandler+0x2b8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001b72:	68a1      	ldr	r1, [r4, #8]
 8001b74:	07c8      	lsls	r0, r1, #31
 8001b76:	d552      	bpl.n	8001c1e <HAL_HCD_IRQHandler+0x3d4>
    if (hhcd->Init.dma_enable != 0U)
 8001b78:	6929      	ldr	r1, [r5, #16]
 8001b7a:	b149      	cbz	r1, 8001b90 <HAL_HCD_IRQHandler+0x346>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b7c:	fb07 5c06 	mla	ip, r7, r6, r5
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b80:	6920      	ldr	r0, [r4, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b82:	f8dc 1048 	ldr.w	r1, [ip, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001b86:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001b8a:	1a09      	subs	r1, r1, r0
 8001b8c:	f8cc 1050 	str.w	r1, [ip, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b90:	fb07 5106 	mla	r1, r7, r6, r5
 8001b94:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b96:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8001b98:	f881 3061 	strb.w	r3, [r1, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001b9c:	65c8      	str	r0, [r1, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b9e:	60a3      	str	r3, [r4, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ba0:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8001ba4:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 8001ba8:	d11e      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x39e>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001baa:	68e3      	ldr	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bac:	6828      	ldr	r0, [r5, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bae:	f043 0302 	orr.w	r3, r3, #2
 8001bb2:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bb4:	4631      	mov	r1, r6
 8001bb6:	f001 fc05 	bl	80033c4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bba:	2310      	movs	r3, #16
 8001bbc:	60a3      	str	r3, [r4, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001bbe:	692b      	ldr	r3, [r5, #16]
 8001bc0:	2b01      	cmp	r3, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001bc2:	fb07 5606 	mla	r6, r7, r6, r5
    if (hhcd->Init.dma_enable == 1U)
 8001bc6:	d106      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x38c>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001bc8:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 8001bcc:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8001bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bd2:	07d9      	lsls	r1, r3, #31
 8001bd4:	d505      	bpl.n	8001be2 <HAL_HCD_IRQHandler+0x398>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001bd6:	f896 3054 	ldrb.w	r3, [r6, #84]	; 0x54
 8001bda:	f083 0301 	eor.w	r3, r3, #1
 8001bde:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001be2:	f10a 0a01 	add.w	sl, sl, #1
 8001be6:	e72b      	b.n	8001a40 <HAL_HCD_IRQHandler+0x1f6>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001be8:	2a03      	cmp	r2, #3
 8001bea:	d10d      	bne.n	8001c08 <HAL_HCD_IRQHandler+0x3be>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001bec:	f859 000b 	ldr.w	r0, [r9, fp]
 8001bf0:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001bf4:	f849 000b 	str.w	r0, [r9, fp]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bf8:	461a      	mov	r2, r3
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bfa:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bfe:	4631      	mov	r1, r6
 8001c00:	4628      	mov	r0, r5
 8001c02:	f001 fdb7 	bl	8003774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c06:	e7da      	b.n	8001bbe <HAL_HCD_IRQHandler+0x374>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001c08:	2a01      	cmp	r2, #1
 8001c0a:	d1d8      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x374>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c0c:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c10:	f881 2060 	strb.w	r2, [r1, #96]	; 0x60
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c14:	f083 0301 	eor.w	r3, r3, #1
 8001c18:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
 8001c1c:	e7ef      	b.n	8001bfe <HAL_HCD_IRQHandler+0x3b4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c1e:	68a1      	ldr	r1, [r4, #8]
 8001c20:	f011 0102 	ands.w	r1, r1, #2
 8001c24:	d03b      	beq.n	8001c9e <HAL_HCD_IRQHandler+0x454>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c26:	68e1      	ldr	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c28:	fb07 5006 	mla	r0, r7, r6, r5
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001c2c:	f021 0102 	bic.w	r1, r1, #2
 8001c30:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c32:	f890 1061 	ldrb.w	r1, [r0, #97]	; 0x61
 8001c36:	2901      	cmp	r1, #1
 8001c38:	d10c      	bne.n	8001c54 <HAL_HCD_IRQHandler+0x40a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001c3a:	f880 1060 	strb.w	r1, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c3e:	fb07 5306 	mla	r3, r7, r6, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c42:	f8c4 8008 	str.w	r8, [r4, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c46:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001c4a:	4631      	mov	r1, r6
 8001c4c:	4628      	mov	r0, r5
 8001c4e:	f001 fd91 	bl	8003774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001c52:	e7c6      	b.n	8001be2 <HAL_HCD_IRQHandler+0x398>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001c54:	2905      	cmp	r1, #5
 8001c56:	d0f0      	beq.n	8001c3a <HAL_HCD_IRQHandler+0x3f0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001c58:	2906      	cmp	r1, #6
 8001c5a:	d001      	beq.n	8001c60 <HAL_HCD_IRQHandler+0x416>
 8001c5c:	2908      	cmp	r1, #8
 8001c5e:	d108      	bne.n	8001c72 <HAL_HCD_IRQHandler+0x428>
      hhcd->hc[ch_num].ErrCnt++;
 8001c60:	fb07 5006 	mla	r0, r7, r6, r5
 8001c64:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001c66:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c68:	2902      	cmp	r1, #2
      hhcd->hc[ch_num].ErrCnt++;
 8001c6a:	65c1      	str	r1, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001c6c:	d903      	bls.n	8001c76 <HAL_HCD_IRQHandler+0x42c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	e010      	b.n	8001c94 <HAL_HCD_IRQHandler+0x44a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001c72:	2903      	cmp	r1, #3
 8001c74:	d10a      	bne.n	8001c8c <HAL_HCD_IRQHandler+0x442>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c76:	f880 8060 	strb.w	r8, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001c7a:	f859 100b 	ldr.w	r1, [r9, fp]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001c7e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001c82:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001c86:	f849 100b 	str.w	r1, [r9, fp]
 8001c8a:	e7d8      	b.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001c8c:	2907      	cmp	r1, #7
 8001c8e:	d1d6      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
      hhcd->hc[ch_num].ErrCnt++;
 8001c90:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001c92:	3301      	adds	r3, #1
 8001c94:	65c3      	str	r3, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c96:	2304      	movs	r3, #4
 8001c98:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c9c:	e7cf      	b.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001c9e:	68a3      	ldr	r3, [r4, #8]
 8001ca0:	06da      	lsls	r2, r3, #27
 8001ca2:	d59e      	bpl.n	8001be2 <HAL_HCD_IRQHandler+0x398>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ca4:	fb07 5206 	mla	r2, r7, r6, r5
 8001ca8:	6828      	ldr	r0, [r5, #0]
 8001caa:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d10a      	bne.n	8001cc8 <HAL_HCD_IRQHandler+0x47e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001cb2:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cb4:	68e3      	ldr	r3, [r4, #12]
 8001cb6:	f043 0302 	orr.w	r3, r3, #2
 8001cba:	60e3      	str	r3, [r4, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cbc:	4631      	mov	r1, r6
 8001cbe:	f001 fb81 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc2:	2310      	movs	r3, #16
 8001cc4:	60a3      	str	r3, [r4, #8]
 8001cc6:	e78c      	b.n	8001be2 <HAL_HCD_IRQHandler+0x398>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cc8:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001ccc:	d1f9      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x478>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001cce:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8001cd0:	692b      	ldr	r3, [r5, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f5      	bne.n	8001cc2 <HAL_HCD_IRQHandler+0x478>
        hhcd->hc[ch_num].state = HC_NAK;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	f882 3061 	strb.w	r3, [r2, #97]	; 0x61
 8001cdc:	e7ea      	b.n	8001cb4 <HAL_HCD_IRQHandler+0x46a>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001cde:	f011 0104 	ands.w	r1, r1, #4
 8001ce2:	d006      	beq.n	8001cf2 <HAL_HCD_IRQHandler+0x4a8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce8:	68e3      	ldr	r3, [r4, #12]
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	60e3      	str	r3, [r4, #12]
 8001cf0:	e777      	b.n	8001be2 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cf2:	68a3      	ldr	r3, [r4, #8]
 8001cf4:	069b      	lsls	r3, r3, #26
 8001cf6:	d514      	bpl.n	8001d22 <HAL_HCD_IRQHandler+0x4d8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	60a3      	str	r3, [r4, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001cfc:	fb07 5306 	mla	r3, r7, r6, r5
 8001d00:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001d04:	2a01      	cmp	r2, #1
 8001d06:	f47f af6c 	bne.w	8001be2 <HAL_HCD_IRQHandler+0x398>
      hhcd->hc[ch_num].do_ping = 0U;
 8001d0a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001d0e:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d12:	68e3      	ldr	r3, [r4, #12]
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d1a:	4631      	mov	r1, r6
 8001d1c:	f001 fb52 	bl	80033c4 <USB_HC_Halt>
 8001d20:	e75f      	b.n	8001be2 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d22:	68a2      	ldr	r2, [r4, #8]
 8001d24:	f412 7200 	ands.w	r2, r2, #512	; 0x200
 8001d28:	d005      	beq.n	8001d36 <HAL_HCD_IRQHandler+0x4ec>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d2a:	68e3      	ldr	r3, [r4, #12]
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d32:	4631      	mov	r1, r6
 8001d34:	e6c8      	b.n	8001ac8 <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d36:	68a1      	ldr	r1, [r4, #8]
 8001d38:	f011 0101 	ands.w	r1, r1, #1
 8001d3c:	d018      	beq.n	8001d70 <HAL_HCD_IRQHandler+0x526>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d3e:	fb07 5306 	mla	r3, r7, r6, r5
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d42:	4631      	mov	r1, r6
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d44:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001d46:	68a2      	ldr	r2, [r4, #8]
 8001d48:	0652      	lsls	r2, r2, #25
      hhcd->hc[ch_num].do_ping = 1U;
 8001d4a:	bf41      	itttt	mi
 8001d4c:	2201      	movmi	r2, #1
 8001d4e:	f883 203d 	strbmi.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d52:	2340      	movmi	r3, #64	; 0x40
 8001d54:	60a3      	strmi	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d56:	68e3      	ldr	r3, [r4, #12]
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d5e:	f001 fb31 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d62:	2301      	movs	r3, #1
 8001d64:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d66:	fb07 5606 	mla	r6, r7, r6, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d6a:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8001d6e:	e738      	b.n	8001be2 <HAL_HCD_IRQHandler+0x398>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001d70:	68a3      	ldr	r3, [r4, #8]
 8001d72:	065b      	lsls	r3, r3, #25
 8001d74:	d511      	bpl.n	8001d9a <HAL_HCD_IRQHandler+0x550>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d76:	fb07 5306 	mla	r3, r7, r6, r5
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d86:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d88:	68e3      	ldr	r3, [r4, #12]
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	4631      	mov	r1, r6
 8001d92:	f001 fb17 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d96:	2340      	movs	r3, #64	; 0x40
 8001d98:	e794      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x47a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001d9a:	68a1      	ldr	r1, [r4, #8]
 8001d9c:	0709      	lsls	r1, r1, #28
 8001d9e:	d50c      	bpl.n	8001dba <HAL_HCD_IRQHandler+0x570>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001da0:	2308      	movs	r3, #8
 8001da2:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da4:	68e3      	ldr	r3, [r4, #12]
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dac:	4631      	mov	r1, r6
 8001dae:	f001 fb09 	bl	80033c4 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001db2:	fb07 5606 	mla	r6, r7, r6, r5
 8001db6:	2305      	movs	r3, #5
 8001db8:	e7d7      	b.n	8001d6a <HAL_HCD_IRQHandler+0x520>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001dba:	68a1      	ldr	r1, [r4, #8]
 8001dbc:	06ca      	lsls	r2, r1, #27
 8001dbe:	d514      	bpl.n	8001dea <HAL_HCD_IRQHandler+0x5a0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001dc0:	fb07 5306 	mla	r3, r7, r6, r5
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	65da      	str	r2, [r3, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001dce:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	f47f af6e 	bne.w	8001cb4 <HAL_HCD_IRQHandler+0x46a>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001dd8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001ddc:	2a00      	cmp	r2, #0
 8001dde:	f47f af69 	bne.w	8001cb4 <HAL_HCD_IRQHandler+0x46a>
        hhcd->hc[ch_num].do_ping = 1U;
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001de8:	e764      	b.n	8001cb4 <HAL_HCD_IRQHandler+0x46a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dea:	68a1      	ldr	r1, [r4, #8]
 8001dec:	060b      	lsls	r3, r1, #24
 8001dee:	d523      	bpl.n	8001e38 <HAL_HCD_IRQHandler+0x5ee>
    if (hhcd->Init.dma_enable == 0U)
 8001df0:	692b      	ldr	r3, [r5, #16]
 8001df2:	b96b      	cbnz	r3, 8001e10 <HAL_HCD_IRQHandler+0x5c6>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001df4:	fb07 5306 	mla	r3, r7, r6, r5
 8001df8:	2206      	movs	r2, #6
 8001dfa:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dfe:	68e3      	ldr	r3, [r4, #12]
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	60e3      	str	r3, [r4, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e06:	4631      	mov	r1, r6
 8001e08:	f001 fadc 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	e759      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x47a>
      hhcd->hc[ch_num].ErrCnt++;
 8001e10:	fb07 5306 	mla	r3, r7, r6, r5
 8001e14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e16:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e18:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8001e1a:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e1c:	d909      	bls.n	8001e32 <HAL_HCD_IRQHandler+0x5e8>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e1e:	2200      	movs	r2, #0
 8001e20:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e22:	2204      	movs	r2, #4
 8001e24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8001e28:	4631      	mov	r1, r6
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f001 fca2 	bl	8003774 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e30:	e7ec      	b.n	8001e0c <HAL_HCD_IRQHandler+0x5c2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e32:	f883 8060 	strb.w	r8, [r3, #96]	; 0x60
 8001e36:	e7e9      	b.n	8001e0c <HAL_HCD_IRQHandler+0x5c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e38:	68a1      	ldr	r1, [r4, #8]
 8001e3a:	0549      	lsls	r1, r1, #21
 8001e3c:	d50f      	bpl.n	8001e5e <HAL_HCD_IRQHandler+0x614>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e3e:	68e3      	ldr	r3, [r4, #12]
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	60e3      	str	r3, [r4, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e46:	4631      	mov	r1, r6
 8001e48:	f001 fabc 	bl	80033c4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	60a3      	str	r3, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	60a3      	str	r3, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001e56:	fb07 5606 	mla	r6, r7, r6, r5
 8001e5a:	2308      	movs	r3, #8
 8001e5c:	e785      	b.n	8001d6a <HAL_HCD_IRQHandler+0x520>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e5e:	68a1      	ldr	r1, [r4, #8]
 8001e60:	078a      	lsls	r2, r1, #30
 8001e62:	f57f aebe 	bpl.w	8001be2 <HAL_HCD_IRQHandler+0x398>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e66:	68e1      	ldr	r1, [r4, #12]
 8001e68:	f021 0102 	bic.w	r1, r1, #2
 8001e6c:	60e1      	str	r1, [r4, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e6e:	fb07 5106 	mla	r1, r7, r6, r5
 8001e72:	f891 0061 	ldrb.w	r0, [r1, #97]	; 0x61
 8001e76:	2801      	cmp	r0, #1
 8001e78:	d121      	bne.n	8001ebe <HAL_HCD_IRQHandler+0x674>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001e7a:	f891 303f 	ldrb.w	r3, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e7e:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001e82:	3b02      	subs	r3, #2
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f63f aeda 	bhi.w	8001c3e <HAL_HCD_IRQHandler+0x3f4>
        if (hhcd->Init.dma_enable == 0U)
 8001e8a:	692b      	ldr	r3, [r5, #16]
 8001e8c:	b933      	cbnz	r3, 8001e9c <HAL_HCD_IRQHandler+0x652>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001e8e:	f891 3055 	ldrb.w	r3, [r1, #85]	; 0x55
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	f881 3055 	strb.w	r3, [r1, #85]	; 0x55
 8001e9a:	e6d0      	b.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	f47f aece 	bne.w	8001c3e <HAL_HCD_IRQHandler+0x3f4>
 8001ea2:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f43f aeca 	beq.w	8001c3e <HAL_HCD_IRQHandler+0x3f4>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001eaa:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8001eb6:	07db      	lsls	r3, r3, #31
 8001eb8:	f57f aec1 	bpl.w	8001c3e <HAL_HCD_IRQHandler+0x3f4>
 8001ebc:	e7e7      	b.n	8001e8e <HAL_HCD_IRQHandler+0x644>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ebe:	2803      	cmp	r0, #3
 8001ec0:	d102      	bne.n	8001ec8 <HAL_HCD_IRQHandler+0x67e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001ec2:	f881 8060 	strb.w	r8, [r1, #96]	; 0x60
 8001ec6:	e6ba      	b.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001ec8:	2804      	cmp	r0, #4
 8001eca:	d0fa      	beq.n	8001ec2 <HAL_HCD_IRQHandler+0x678>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ecc:	2805      	cmp	r0, #5
 8001ece:	d102      	bne.n	8001ed6 <HAL_HCD_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001ed0:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
 8001ed4:	e6b3      	b.n	8001c3e <HAL_HCD_IRQHandler+0x3f4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ed6:	2806      	cmp	r0, #6
 8001ed8:	f43f aec2 	beq.w	8001c60 <HAL_HCD_IRQHandler+0x416>
 8001edc:	2808      	cmp	r0, #8
 8001ede:	f47f aeae 	bne.w	8001c3e <HAL_HCD_IRQHandler+0x3f4>
 8001ee2:	e6bd      	b.n	8001c60 <HAL_HCD_IRQHandler+0x416>

08001ee4 <HAL_HCD_Stop>:
{
 8001ee4:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8001ee6:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8001eea:	2b01      	cmp	r3, #1
{
 8001eec:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001eee:	d009      	beq.n	8001f04 <HAL_HCD_Stop+0x20>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001ef6:	6800      	ldr	r0, [r0, #0]
 8001ef8:	f001 fac3 	bl	8003482 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001f02:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001f04:	2002      	movs	r0, #2
 8001f06:	e7fc      	b.n	8001f02 <HAL_HCD_Stop+0x1e>

08001f08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8001f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001f0c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001f0e:	6804      	ldr	r4, [r0, #0]
 8001f10:	684f      	ldr	r7, [r1, #4]
 8001f12:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f14:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8001f18:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001f1c:	3284      	adds	r2, #132	; 0x84
 8001f1e:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f20:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001f24:	6858      	ldr	r0, [r3, #4]
 8001f26:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001f2a:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f2c:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001f2e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f32:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8001f36:	4430      	add	r0, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001f38:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001f3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001f3e:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001f40:	68e0      	ldr	r0, [r4, #12]
 8001f42:	68cd      	ldr	r5, [r1, #12]
 8001f44:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8001f48:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001f4a:	6898      	ldr	r0, [r3, #8]
 8001f4c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001f50:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001f52:	68e6      	ldr	r6, [r4, #12]
 8001f54:	6888      	ldr	r0, [r1, #8]
 8001f56:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001f5a:	3001      	adds	r0, #1
 8001f5c:	4430      	add	r0, r6
 8001f5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001f62:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001f64:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001f66:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8001f68:	f020 0007 	bic.w	r0, r0, #7
 8001f6c:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001f6e:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001f72:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001f74:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001f76:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8001f7a:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001f7e:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001f82:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001f86:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8001f8a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8001f8e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8001f92:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8001f94:	6958      	ldr	r0, [r3, #20]
 8001f96:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8001f9a:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8001f9c:	6948      	ldr	r0, [r1, #20]
 8001f9e:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8001fa0:	69d8      	ldr	r0, [r3, #28]
 8001fa2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001fa6:	f020 0007 	bic.w	r0, r0, #7
 8001faa:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8001fac:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8001fb0:	4305      	orrs	r5, r0
 8001fb2:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001fb4:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001fb6:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8001fb8:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8001fbc:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8001fbe:	b31e      	cbz	r6, 8002008 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8001fc0:	2e01      	cmp	r6, #1
 8001fc2:	d023      	beq.n	800200c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8001fc4:	1eb0      	subs	r0, r6, #2
 8001fc6:	2802      	cmp	r0, #2
 8001fc8:	d922      	bls.n	8002010 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8001fca:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8001fcc:	bf0c      	ite	eq
 8001fce:	2002      	moveq	r0, #2
 8001fd0:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8001fd2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001fd4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8001fd8:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001fda:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001fdc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8001fde:	eba7 070c 	sub.w	r7, r7, ip
 8001fe2:	4345      	muls	r5, r0
 8001fe4:	4378      	muls	r0, r7
 8001fe6:	3003      	adds	r0, #3
 8001fe8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001fec:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001fee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001ff0:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001ff4:	f020 0007 	bic.w	r0, r0, #7
 8001ff8:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8001ffa:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8001ffc:	58a3      	ldr	r3, [r4, r2]
 8001ffe:	f043 0301 	orr.w	r3, r3, #1
 8002002:	50a3      	str	r3, [r4, r2]
}
 8002004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002008:	2004      	movs	r0, #4
 800200a:	e7e2      	b.n	8001fd2 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800200c:	2003      	movs	r0, #3
 800200e:	e7e0      	b.n	8001fd2 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8002010:	2002      	movs	r0, #2
 8002012:	e7de      	b.n	8001fd2 <LTDC_SetConfig+0xca>

08002014 <HAL_LTDC_MspInit>:
}
 8002014:	4770      	bx	lr
	...

08002018 <HAL_LTDC_Init>:
{
 8002018:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800201a:	4604      	mov	r4, r0
 800201c:	2800      	cmp	r0, #0
 800201e:	d063      	beq.n	80020e8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002020:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002024:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002028:	b91b      	cbnz	r3, 8002032 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800202a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800202e:	f7ff fff1 	bl	8002014 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002040:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002042:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002046:	4302      	orrs	r2, r0
 8002048:	68e0      	ldr	r0, [r4, #12]
 800204a:	6999      	ldr	r1, [r3, #24]
 800204c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800204e:	6920      	ldr	r0, [r4, #16]
 8002050:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002052:	430a      	orrs	r2, r1
 8002054:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	4924      	ldr	r1, [pc, #144]	; (80020ec <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800205a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800205c:	400a      	ands	r2, r1
 800205e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002066:	69a0      	ldr	r0, [r4, #24]
 8002068:	4302      	orrs	r2, r0
 800206a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800206c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800206e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002070:	400a      	ands	r2, r1
 8002072:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800207a:	6a20      	ldr	r0, [r4, #32]
 800207c:	4302      	orrs	r2, r0
 800207e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002080:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002082:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002084:	400a      	ands	r2, r1
 8002086:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800208e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002090:	4302      	orrs	r2, r0
 8002092:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	4011      	ands	r1, r2
 8002098:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800209a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800209c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800209e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80020a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80020a4:	430a      	orrs	r2, r1
 80020a6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80020aa:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80020ae:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80020b2:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80020b6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80020b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ba:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80020be:	430a      	orrs	r2, r1
 80020c0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80020c4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80020ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020cc:	f042 0206 	orr.w	r2, r2, #6
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80020d2:	699a      	ldr	r2, [r3, #24]
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80020da:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80020dc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80020de:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80020e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80020e6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
 80020ea:	e7fc      	b.n	80020e6 <HAL_LTDC_Init+0xce>
 80020ec:	f000f800 	.word	0xf000f800

080020f0 <HAL_LTDC_ConfigLayer>:
{
 80020f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80020f4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80020f8:	2b01      	cmp	r3, #1
{
 80020fa:	4606      	mov	r6, r0
 80020fc:	460f      	mov	r7, r1
 80020fe:	4694      	mov	ip, r2
 8002100:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8002104:	d01f      	beq.n	8002146 <HAL_LTDC_ConfigLayer+0x56>
 8002106:	f04f 0801 	mov.w	r8, #1
 800210a:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800210e:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002112:	2434      	movs	r4, #52	; 0x34
 8002114:	460d      	mov	r5, r1
 8002116:	fb04 6402 	mla	r4, r4, r2, r6
 800211a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211c:	3438      	adds	r4, #56	; 0x38
 800211e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002128:	682b      	ldr	r3, [r5, #0]
 800212a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800212c:	4630      	mov	r0, r6
 800212e:	4662      	mov	r2, ip
 8002130:	4639      	mov	r1, r7
 8002132:	f7ff fee9 	bl	8001f08 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002136:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002138:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800213a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800213e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002142:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800214c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 800214c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002150:	2b01      	cmp	r3, #1
 8002152:	f04f 0302 	mov.w	r3, #2
 8002156:	d00c      	beq.n	8002172 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800215a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800215e:	6993      	ldr	r3, [r2, #24]
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002166:	2301      	movs	r3, #1
 8002168:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800216c:	2300      	movs	r3, #0
 800216e:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002172:	4618      	mov	r0, r3
}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40016800 	.word	0x40016800

0800217c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002180:	4604      	mov	r4, r0
 8002182:	b340      	cbz	r0, 80021d6 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002184:	6803      	ldr	r3, [r0, #0]
 8002186:	07dd      	lsls	r5, r3, #31
 8002188:	d410      	bmi.n	80021ac <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	6823      	ldr	r3, [r4, #0]
 800218c:	0798      	lsls	r0, r3, #30
 800218e:	d45e      	bmi.n	800224e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002190:	6823      	ldr	r3, [r4, #0]
 8002192:	071a      	lsls	r2, r3, #28
 8002194:	f100 80a0 	bmi.w	80022d8 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	075b      	lsls	r3, r3, #29
 800219c:	f100 80be 	bmi.w	800231c <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	69a0      	ldr	r0, [r4, #24]
 80021a2:	2800      	cmp	r0, #0
 80021a4:	f040 811f 	bne.w	80023e6 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80021a8:	2000      	movs	r0, #0
 80021aa:	e02b      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021ac:	4ba6      	ldr	r3, [pc, #664]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	f002 020c 	and.w	r2, r2, #12
 80021b4:	2a04      	cmp	r2, #4
 80021b6:	d007      	beq.n	80021c8 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021b8:	689a      	ldr	r2, [r3, #8]
 80021ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021be:	2a08      	cmp	r2, #8
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	0251      	lsls	r1, r2, #9
 80021c6:	d508      	bpl.n	80021da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c8:	4b9f      	ldr	r3, [pc, #636]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	039a      	lsls	r2, r3, #14
 80021ce:	d5dc      	bpl.n	800218a <HAL_RCC_OscConfig+0xe>
 80021d0:	6863      	ldr	r3, [r4, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1d9      	bne.n	800218a <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80021d6:	2001      	movs	r0, #1
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	6862      	ldr	r2, [r4, #4]
 80021dc:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021e0:	d113      	bne.n	800220a <HAL_RCC_OscConfig+0x8e>
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021e8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021ea:	f7fe ffad 	bl	8001148 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ee:	4e96      	ldr	r6, [pc, #600]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80021f0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	6833      	ldr	r3, [r6, #0]
 80021f4:	039b      	lsls	r3, r3, #14
 80021f6:	d4c8      	bmi.n	800218a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe ffa6 	bl	8001148 <HAL_GetTick>
 80021fc:	1b40      	subs	r0, r0, r5
 80021fe:	2864      	cmp	r0, #100	; 0x64
 8002200:	d9f7      	bls.n	80021f2 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002202:	2003      	movs	r0, #3
}
 8002204:	b002      	add	sp, #8
 8002206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220a:	4d8f      	ldr	r5, [pc, #572]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 800220c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002210:	682b      	ldr	r3, [r5, #0]
 8002212:	d107      	bne.n	8002224 <HAL_RCC_OscConfig+0xa8>
 8002214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002218:	602b      	str	r3, [r5, #0]
 800221a:	682b      	ldr	r3, [r5, #0]
 800221c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002220:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002222:	e7e2      	b.n	80021ea <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002228:	602b      	str	r3, [r5, #0]
 800222a:	682b      	ldr	r3, [r5, #0]
 800222c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002230:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002232:	2a00      	cmp	r2, #0
 8002234:	d1d9      	bne.n	80021ea <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002236:	f7fe ff87 	bl	8001148 <HAL_GetTick>
 800223a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	039f      	lsls	r7, r3, #14
 8002240:	d5a3      	bpl.n	800218a <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002242:	f7fe ff81 	bl	8001148 <HAL_GetTick>
 8002246:	1b80      	subs	r0, r0, r6
 8002248:	2864      	cmp	r0, #100	; 0x64
 800224a:	d9f7      	bls.n	800223c <HAL_RCC_OscConfig+0xc0>
 800224c:	e7d9      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800224e:	4b7e      	ldr	r3, [pc, #504]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f012 0f0c 	tst.w	r2, #12
 8002256:	d007      	beq.n	8002268 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800225e:	2a08      	cmp	r2, #8
 8002260:	d111      	bne.n	8002286 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	025e      	lsls	r6, r3, #9
 8002266:	d40e      	bmi.n	8002286 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	0795      	lsls	r5, r2, #30
 800226e:	d502      	bpl.n	8002276 <HAL_RCC_OscConfig+0xfa>
 8002270:	68e2      	ldr	r2, [r4, #12]
 8002272:	2a01      	cmp	r2, #1
 8002274:	d1af      	bne.n	80021d6 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6921      	ldr	r1, [r4, #16]
 800227a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800227e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002282:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002284:	e784      	b.n	8002190 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002286:	68e2      	ldr	r2, [r4, #12]
 8002288:	4b70      	ldr	r3, [pc, #448]	; (800244c <HAL_RCC_OscConfig+0x2d0>)
 800228a:	b1b2      	cbz	r2, 80022ba <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002290:	f7fe ff5a 	bl	8001148 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4d6c      	ldr	r5, [pc, #432]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002296:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	682b      	ldr	r3, [r5, #0]
 800229a:	0798      	lsls	r0, r3, #30
 800229c:	d507      	bpl.n	80022ae <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229e:	682b      	ldr	r3, [r5, #0]
 80022a0:	6922      	ldr	r2, [r4, #16]
 80022a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022aa:	602b      	str	r3, [r5, #0]
 80022ac:	e770      	b.n	8002190 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe ff4b 	bl	8001148 <HAL_GetTick>
 80022b2:	1b80      	subs	r0, r0, r6
 80022b4:	2802      	cmp	r0, #2
 80022b6:	d9ef      	bls.n	8002298 <HAL_RCC_OscConfig+0x11c>
 80022b8:	e7a3      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80022ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022bc:	f7fe ff44 	bl	8001148 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c0:	4e61      	ldr	r6, [pc, #388]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80022c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c4:	6833      	ldr	r3, [r6, #0]
 80022c6:	0799      	lsls	r1, r3, #30
 80022c8:	f57f af62 	bpl.w	8002190 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022cc:	f7fe ff3c 	bl	8001148 <HAL_GetTick>
 80022d0:	1b40      	subs	r0, r0, r5
 80022d2:	2802      	cmp	r0, #2
 80022d4:	d9f6      	bls.n	80022c4 <HAL_RCC_OscConfig+0x148>
 80022d6:	e794      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022d8:	6962      	ldr	r2, [r4, #20]
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCC_OscConfig+0x2d4>)
 80022dc:	b17a      	cbz	r2, 80022fe <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80022e2:	f7fe ff31 	bl	8001148 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e6:	4e58      	ldr	r6, [pc, #352]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80022e8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ea:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80022ec:	079f      	lsls	r7, r3, #30
 80022ee:	f53f af53 	bmi.w	8002198 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fe ff29 	bl	8001148 <HAL_GetTick>
 80022f6:	1b40      	subs	r0, r0, r5
 80022f8:	2802      	cmp	r0, #2
 80022fa:	d9f6      	bls.n	80022ea <HAL_RCC_OscConfig+0x16e>
 80022fc:	e781      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80022fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002300:	f7fe ff22 	bl	8001148 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002304:	4e50      	ldr	r6, [pc, #320]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002306:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002308:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800230a:	0798      	lsls	r0, r3, #30
 800230c:	f57f af44 	bpl.w	8002198 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002310:	f7fe ff1a 	bl	8001148 <HAL_GetTick>
 8002314:	1b40      	subs	r0, r0, r5
 8002316:	2802      	cmp	r0, #2
 8002318:	d9f6      	bls.n	8002308 <HAL_RCC_OscConfig+0x18c>
 800231a:	e772      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b4a      	ldr	r3, [pc, #296]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 800231e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002320:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002324:	d128      	bne.n	8002378 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	9201      	str	r2, [sp, #4]
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800233a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4d45      	ldr	r5, [pc, #276]	; (8002454 <HAL_RCC_OscConfig+0x2d8>)
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	05d9      	lsls	r1, r3, #23
 8002342:	d51b      	bpl.n	800237c <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	68a3      	ldr	r3, [r4, #8]
 8002346:	4d40      	ldr	r5, [pc, #256]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 8002348:	2b01      	cmp	r3, #1
 800234a:	d127      	bne.n	800239c <HAL_RCC_OscConfig+0x220>
 800234c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002354:	f7fe fef8 	bl	8001148 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4e3b      	ldr	r6, [pc, #236]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 800235a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002362:	079b      	lsls	r3, r3, #30
 8002364:	d539      	bpl.n	80023da <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8002366:	2f00      	cmp	r7, #0
 8002368:	f43f af1a 	beq.w	80021a0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4a36      	ldr	r2, [pc, #216]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 800236e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	e713      	b.n	80021a0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002378:	2700      	movs	r7, #0
 800237a:	e7df      	b.n	800233c <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002382:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002384:	f7fe fee0 	bl	8001148 <HAL_GetTick>
 8002388:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238a:	682b      	ldr	r3, [r5, #0]
 800238c:	05da      	lsls	r2, r3, #23
 800238e:	d4d9      	bmi.n	8002344 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7fe feda 	bl	8001148 <HAL_GetTick>
 8002394:	1b80      	subs	r0, r0, r6
 8002396:	2802      	cmp	r0, #2
 8002398:	d9f7      	bls.n	800238a <HAL_RCC_OscConfig+0x20e>
 800239a:	e732      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800239c:	2b05      	cmp	r3, #5
 800239e:	d104      	bne.n	80023aa <HAL_RCC_OscConfig+0x22e>
 80023a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	672b      	str	r3, [r5, #112]	; 0x70
 80023a8:	e7d0      	b.n	800234c <HAL_RCC_OscConfig+0x1d0>
 80023aa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023ac:	f022 0201 	bic.w	r2, r2, #1
 80023b0:	672a      	str	r2, [r5, #112]	; 0x70
 80023b2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1ca      	bne.n	8002354 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 80023be:	f7fe fec3 	bl	8001148 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80023c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80023ca:	0798      	lsls	r0, r3, #30
 80023cc:	d5cb      	bpl.n	8002366 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ce:	f7fe febb 	bl	8001148 <HAL_GetTick>
 80023d2:	1b80      	subs	r0, r0, r6
 80023d4:	4540      	cmp	r0, r8
 80023d6:	d9f7      	bls.n	80023c8 <HAL_RCC_OscConfig+0x24c>
 80023d8:	e713      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023da:	f7fe feb5 	bl	8001148 <HAL_GetTick>
 80023de:	1b40      	subs	r0, r0, r5
 80023e0:	4540      	cmp	r0, r8
 80023e2:	d9bd      	bls.n	8002360 <HAL_RCC_OscConfig+0x1e4>
 80023e4:	e70d      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e6:	4d18      	ldr	r5, [pc, #96]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
 80023e8:	68ab      	ldr	r3, [r5, #8]
 80023ea:	f003 030c 	and.w	r3, r3, #12
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d047      	beq.n	8002482 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f2:	4e19      	ldr	r6, [pc, #100]	; (8002458 <HAL_RCC_OscConfig+0x2dc>)
 80023f4:	2300      	movs	r3, #0
 80023f6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80023f8:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023fa:	d135      	bne.n	8002468 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 80023fc:	f7fe fea4 	bl	8001148 <HAL_GetTick>
 8002400:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002402:	682b      	ldr	r3, [r5, #0]
 8002404:	0199      	lsls	r1, r3, #6
 8002406:	d429      	bmi.n	800245c <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002408:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800240c:	4313      	orrs	r3, r2
 800240e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002410:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002414:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002416:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800241a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800241c:	0852      	lsrs	r2, r2, #1
 800241e:	3a01      	subs	r2, #1
 8002420:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002424:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002426:	2301      	movs	r3, #1
 8002428:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800242a:	f7fe fe8d 	bl	8001148 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4d06      	ldr	r5, [pc, #24]	; (8002448 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002430:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002432:	682b      	ldr	r3, [r5, #0]
 8002434:	019a      	lsls	r2, r3, #6
 8002436:	f53f aeb7 	bmi.w	80021a8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800243a:	f7fe fe85 	bl	8001148 <HAL_GetTick>
 800243e:	1b00      	subs	r0, r0, r4
 8002440:	2802      	cmp	r0, #2
 8002442:	d9f6      	bls.n	8002432 <HAL_RCC_OscConfig+0x2b6>
 8002444:	e6dd      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	42470000 	.word	0x42470000
 8002450:	42470e80 	.word	0x42470e80
 8002454:	40007000 	.word	0x40007000
 8002458:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7fe fe74 	bl	8001148 <HAL_GetTick>
 8002460:	1bc0      	subs	r0, r0, r7
 8002462:	2802      	cmp	r0, #2
 8002464:	d9cd      	bls.n	8002402 <HAL_RCC_OscConfig+0x286>
 8002466:	e6cc      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002468:	f7fe fe6e 	bl	8001148 <HAL_GetTick>
 800246c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	682b      	ldr	r3, [r5, #0]
 8002470:	019b      	lsls	r3, r3, #6
 8002472:	f57f ae99 	bpl.w	80021a8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002476:	f7fe fe67 	bl	8001148 <HAL_GetTick>
 800247a:	1b00      	subs	r0, r0, r4
 800247c:	2802      	cmp	r0, #2
 800247e:	d9f6      	bls.n	800246e <HAL_RCC_OscConfig+0x2f2>
 8002480:	e6bf      	b.n	8002202 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002482:	2801      	cmp	r0, #1
 8002484:	f43f aebe 	beq.w	8002204 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002488:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	4291      	cmp	r1, r2
 8002492:	f47f aea0 	bne.w	80021d6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002496:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249c:	428a      	cmp	r2, r1
 800249e:	f47f ae9a 	bne.w	80021d6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024a2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80024a8:	401a      	ands	r2, r3
 80024aa:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80024ae:	f47f ae92 	bne.w	80021d6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024b2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024b4:	0852      	lsrs	r2, r2, #1
 80024b6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80024ba:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024bc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80024c0:	f47f ae89 	bne.w	80021d6 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024ca:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80024ce:	f43f ae6b 	beq.w	80021a8 <HAL_RCC_OscConfig+0x2c>
 80024d2:	e680      	b.n	80021d6 <HAL_RCC_OscConfig+0x5a>

080024d4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d4:	4913      	ldr	r1, [pc, #76]	; (8002524 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80024d6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024d8:	688b      	ldr	r3, [r1, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d01c      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x48>
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024e6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024e8:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f0:	bf14      	ite	ne
 80024f2:	480d      	ldrne	r0, [pc, #52]	; (8002528 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f4:	480d      	ldreq	r0, [pc, #52]	; (800252c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024fa:	bf18      	it	ne
 80024fc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002502:	fba1 0100 	umull	r0, r1, r1, r0
 8002506:	f7fd fe71 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <HAL_RCC_GetSysClockFreq+0x50>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002512:	3301      	adds	r3, #1
 8002514:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002516:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800251a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <HAL_RCC_GetSysClockFreq+0x54>)
 800251e:	e7fc      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002522:	e7fa      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x46>
 8002524:	40023800 	.word	0x40023800
 8002528:	007a1200 	.word	0x007a1200
 800252c:	00f42400 	.word	0x00f42400

08002530 <HAL_RCC_ClockConfig>:
{
 8002530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002534:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002536:	4604      	mov	r4, r0
 8002538:	b910      	cbnz	r0, 8002540 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800253a:	2001      	movs	r0, #1
}
 800253c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b44      	ldr	r3, [pc, #272]	; (8002654 <HAL_RCC_ClockConfig+0x124>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f002 020f 	and.w	r2, r2, #15
 8002548:	428a      	cmp	r2, r1
 800254a:	d328      	bcc.n	800259e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800254c:	6822      	ldr	r2, [r4, #0]
 800254e:	0797      	lsls	r7, r2, #30
 8002550:	d42d      	bmi.n	80025ae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	07d0      	lsls	r0, r2, #31
 8002554:	d441      	bmi.n	80025da <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_ClockConfig+0x124>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f002 020f 	and.w	r2, r2, #15
 800255e:	42aa      	cmp	r2, r5
 8002560:	d866      	bhi.n	8002630 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002562:	6822      	ldr	r2, [r4, #0]
 8002564:	0751      	lsls	r1, r2, #29
 8002566:	d46c      	bmi.n	8002642 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	0713      	lsls	r3, r2, #28
 800256a:	d507      	bpl.n	800257c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800256c:	4a3a      	ldr	r2, [pc, #232]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 800256e:	6921      	ldr	r1, [r4, #16]
 8002570:	6893      	ldr	r3, [r2, #8]
 8002572:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002576:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800257a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800257c:	f7ff ffaa 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002580:	4b35      	ldr	r3, [pc, #212]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 8002582:	4a36      	ldr	r2, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x12c>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	40d8      	lsrs	r0, r3
 800258e:	4b34      	ldr	r3, [pc, #208]	; (8002660 <HAL_RCC_ClockConfig+0x130>)
 8002590:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_ClockConfig+0x134>)
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f7fe fd8f 	bl	80010b8 <HAL_InitTick>
  return HAL_OK;
 800259a:	2000      	movs	r0, #0
 800259c:	e7ce      	b.n	800253c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	b2ca      	uxtb	r2, r1
 80025a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 030f 	and.w	r3, r3, #15
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d1c6      	bne.n	800253a <HAL_RCC_ClockConfig+0xa>
 80025ac:	e7ce      	b.n	800254c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ae:	4b2a      	ldr	r3, [pc, #168]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 80025b0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025b4:	bf1e      	ittt	ne
 80025b6:	6899      	ldrne	r1, [r3, #8]
 80025b8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80025bc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c0:	bf42      	ittt	mi
 80025c2:	6899      	ldrmi	r1, [r3, #8]
 80025c4:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80025c8:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ca:	4923      	ldr	r1, [pc, #140]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 80025cc:	68a0      	ldr	r0, [r4, #8]
 80025ce:	688b      	ldr	r3, [r1, #8]
 80025d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d4:	4303      	orrs	r3, r0
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	e7bb      	b.n	8002552 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025da:	6862      	ldr	r2, [r4, #4]
 80025dc:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 80025de:	2a01      	cmp	r2, #1
 80025e0:	d11c      	bne.n	800261c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e8:	d0a7      	beq.n	800253a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4e1b      	ldr	r6, [pc, #108]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 80025ec:	68b3      	ldr	r3, [r6, #8]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	4313      	orrs	r3, r2
 80025f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80025f6:	f7fe fda7 	bl	8001148 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80025fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002600:	68b3      	ldr	r3, [r6, #8]
 8002602:	6862      	ldr	r2, [r4, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800260c:	d0a3      	beq.n	8002556 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe fd9b 	bl	8001148 <HAL_GetTick>
 8002612:	1bc0      	subs	r0, r0, r7
 8002614:	4540      	cmp	r0, r8
 8002616:	d9f3      	bls.n	8002600 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002618:	2003      	movs	r0, #3
 800261a:	e78f      	b.n	800253c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261c:	1e91      	subs	r1, r2, #2
 800261e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002620:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002622:	d802      	bhi.n	800262a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002624:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002628:	e7de      	b.n	80025e8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262a:	f013 0f02 	tst.w	r3, #2
 800262e:	e7db      	b.n	80025e8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002630:	b2ea      	uxtb	r2, r5
 8002632:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	42ab      	cmp	r3, r5
 800263c:	f47f af7d 	bne.w	800253a <HAL_RCC_ClockConfig+0xa>
 8002640:	e78f      	b.n	8002562 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002642:	4905      	ldr	r1, [pc, #20]	; (8002658 <HAL_RCC_ClockConfig+0x128>)
 8002644:	68e0      	ldr	r0, [r4, #12]
 8002646:	688b      	ldr	r3, [r1, #8]
 8002648:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800264c:	4303      	orrs	r3, r0
 800264e:	608b      	str	r3, [r1, #8]
 8002650:	e78a      	b.n	8002568 <HAL_RCC_ClockConfig+0x38>
 8002652:	bf00      	nop
 8002654:	40023c00 	.word	0x40023c00
 8002658:	40023800 	.word	0x40023800
 800265c:	08007560 	.word	0x08007560
 8002660:	20000078 	.word	0x20000078
 8002664:	20000080 	.word	0x20000080

08002668 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8002668:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800266a:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 800266e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002670:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002672:	f040 808a 	bne.w	800278a <HAL_RCCEx_PeriphCLKConfig+0x122>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	f013 0f0c 	tst.w	r3, #12
 800267c:	d044      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800267e:	4d89      	ldr	r5, [pc, #548]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002680:	4e89      	ldr	r6, [pc, #548]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLSAI_DISABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002686:	f7fe fd5f 	bl	8001148 <HAL_GetTick>
 800268a:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800268c:	6833      	ldr	r3, [r6, #0]
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	f100 80cc 	bmi.w	800282c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8002694:	6821      	ldr	r1, [r4, #0]
 8002696:	074f      	lsls	r7, r1, #29
 8002698:	d515      	bpl.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800269a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800269e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80026a8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026ac:	4313      	orrs	r3, r2
 80026ae:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80026b2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80026b6:	6a22      	ldr	r2, [r4, #32]
 80026b8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80026bc:	3a01      	subs	r2, #1
 80026be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80026c2:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026c6:	070e      	lsls	r6, r1, #28
 80026c8:	d514      	bpl.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ca:	4a77      	ldr	r2, [pc, #476]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80026cc:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ce:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80026d2:	6920      	ldr	r0, [r4, #16]
 80026d4:	071b      	lsls	r3, r3, #28
 80026d6:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80026da:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80026de:	430b      	orrs	r3, r1
 80026e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80026e4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80026e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80026ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80026ee:	430b      	orrs	r3, r1
 80026f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026f4:	2301      	movs	r3, #1
 80026f6:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fd26 	bl	8001148 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026fc:	4e6a      	ldr	r6, [pc, #424]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 80026fe:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002700:	6833      	ldr	r3, [r6, #0]
 8002702:	0098      	lsls	r0, r3, #2
 8002704:	f140 8099 	bpl.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	069a      	lsls	r2, r3, #26
 800270c:	d533      	bpl.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	4b65      	ldr	r3, [pc, #404]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002714:	4d65      	ldr	r5, [pc, #404]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002718:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fd0a 	bl	8001148 <HAL_GetTick>
 8002734:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002736:	682b      	ldr	r3, [r5, #0]
 8002738:	05d9      	lsls	r1, r3, #23
 800273a:	f140 8085 	bpl.w	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800273e:	4d5a      	ldr	r5, [pc, #360]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002740:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002742:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002746:	f040 8086 	bne.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800274a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800274c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002750:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002756:	f040 80a0 	bne.w	800289a <HAL_RCCEx_PeriphCLKConfig+0x232>
 800275a:	6891      	ldr	r1, [r2, #8]
 800275c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8002760:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002764:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8002768:	4301      	orrs	r1, r0
 800276a:	6091      	str	r1, [r2, #8]
 800276c:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800276e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002772:	430b      	orrs	r3, r1
 8002774:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800277c:	bf1f      	itttt	ne
 800277e:	4b4c      	ldrne	r3, [pc, #304]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002780:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8002784:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8002786:	2000      	movne	r0, #0
 8002788:	e04e      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_PLLI2S_DISABLE();
 800278a:	4d4a      	ldr	r5, [pc, #296]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800278c:	4f46      	ldr	r7, [pc, #280]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLI2S_DISABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002792:	f7fe fcd9 	bl	8001148 <HAL_GetTick>
 8002796:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	011a      	lsls	r2, r3, #4
 800279c:	d43e      	bmi.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800279e:	6821      	ldr	r1, [r4, #0]
 80027a0:	07cb      	lsls	r3, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80027a2:	bf41      	itttt	mi
 80027a4:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80027a8:	071b      	lslmi	r3, r3, #28
 80027aa:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80027ae:	f8c7 3084 	strmi.w	r3, [r7, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80027b2:	078e      	lsls	r6, r1, #30
 80027b4:	d515      	bpl.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027b6:	4a3c      	ldr	r2, [pc, #240]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80027b8:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ba:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80027be:	6866      	ldr	r6, [r4, #4]
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80027c6:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 80027ca:	4303      	orrs	r3, r0
 80027cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027d0:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80027d4:	69e3      	ldr	r3, [r4, #28]
 80027d6:	f020 001f 	bic.w	r0, r0, #31
 80027da:	3b01      	subs	r3, #1
 80027dc:	4303      	orrs	r3, r0
 80027de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027e2:	0648      	lsls	r0, r1, #25
 80027e4:	d50a      	bpl.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	6862      	ldr	r2, [r4, #4]
 80027ea:	061b      	lsls	r3, r3, #24
 80027ec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80027f0:	68a2      	ldr	r2, [r4, #8]
 80027f2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80027f6:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80027f8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80027fc:	2301      	movs	r3, #1
 80027fe:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002800:	f7fe fca2 	bl	8001148 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002804:	4e28      	ldr	r6, [pc, #160]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 8002806:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002808:	6833      	ldr	r3, [r6, #0]
 800280a:	0119      	lsls	r1, r3, #4
 800280c:	f53f af33 	bmi.w	8002676 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002810:	f7fe fc9a 	bl	8001148 <HAL_GetTick>
 8002814:	1b40      	subs	r0, r0, r5
 8002816:	2802      	cmp	r0, #2
 8002818:	d9f6      	bls.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800281a:	e004      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800281c:	f7fe fc94 	bl	8001148 <HAL_GetTick>
 8002820:	1b80      	subs	r0, r0, r6
 8002822:	2802      	cmp	r0, #2
 8002824:	d9b8      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x130>
        return HAL_TIMEOUT;
 8002826:	2003      	movs	r0, #3
}
 8002828:	b003      	add	sp, #12
 800282a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800282c:	f7fe fc8c 	bl	8001148 <HAL_GetTick>
 8002830:	1bc0      	subs	r0, r0, r7
 8002832:	2802      	cmp	r0, #2
 8002834:	f67f af2a 	bls.w	800268c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002838:	e7f5      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800283a:	f7fe fc85 	bl	8001148 <HAL_GetTick>
 800283e:	1b40      	subs	r0, r0, r5
 8002840:	2802      	cmp	r0, #2
 8002842:	f67f af5d 	bls.w	8002700 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002846:	e7ee      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe fc7e 	bl	8001148 <HAL_GetTick>
 800284c:	1b80      	subs	r0, r0, r6
 800284e:	2802      	cmp	r0, #2
 8002850:	f67f af71 	bls.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8002854:	e7e7      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002858:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800285c:	4293      	cmp	r3, r2
 800285e:	f43f af74 	beq.w	800274a <HAL_RCCEx_PeriphCLKConfig+0xe2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002862:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002866:	2101      	movs	r1, #1
 8002868:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800286a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800286e:	2100      	movs	r1, #0
 8002870:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002872:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002874:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002876:	07da      	lsls	r2, r3, #31
 8002878:	f57f af67 	bpl.w	800274a <HAL_RCCEx_PeriphCLKConfig+0xe2>
        tickstart = HAL_GetTick();
 800287c:	f7fe fc64 	bl	8001148 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002884:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002888:	079b      	lsls	r3, r3, #30
 800288a:	f53f af5e 	bmi.w	800274a <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7fe fc5b 	bl	8001148 <HAL_GetTick>
 8002892:	1b80      	subs	r0, r0, r6
 8002894:	42b8      	cmp	r0, r7
 8002896:	d9f6      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002898:	e7c5      	b.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289a:	6891      	ldr	r1, [r2, #8]
 800289c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80028a0:	e763      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x102>
 80028a2:	bf00      	nop
 80028a4:	42470070 	.word	0x42470070
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
 80028b0:	424711e0 	.word	0x424711e0
 80028b4:	42470068 	.word	0x42470068
 80028b8:	42470e40 	.word	0x42470e40

080028bc <HAL_SDRAM_MspInit>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80028bc:	4770      	bx	lr

080028be <HAL_SDRAM_Init>:
{   
 80028be:	b538      	push	{r3, r4, r5, lr}
 80028c0:	460d      	mov	r5, r1
  if(hsdram == NULL)
 80028c2:	4604      	mov	r4, r0
 80028c4:	b1c8      	cbz	r0, 80028fa <HAL_SDRAM_Init+0x3c>
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80028c6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80028ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028ce:	b91b      	cbnz	r3, 80028d8 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 80028d0:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 80028d4:	f7ff fff2 	bl	80028bc <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80028d8:	2302      	movs	r3, #2
 80028da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80028de:	1d21      	adds	r1, r4, #4
 80028e0:	6820      	ldr	r0, [r4, #0]
 80028e2:	f000 fc55 	bl	8003190 <FMC_SDRAM_Init>
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80028e6:	6862      	ldr	r2, [r4, #4]
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	4629      	mov	r1, r5
 80028ec:	f000 fc86 	bl	80031fc <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 80028f6:	2000      	movs	r0, #0
}
 80028f8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80028fa:	2001      	movs	r0, #1
 80028fc:	e7fc      	b.n	80028f8 <HAL_SDRAM_Init+0x3a>

080028fe <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80028fe:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002900:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002904:	2b02      	cmp	r3, #2
{
 8002906:	4604      	mov	r4, r0
 8002908:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800290a:	b2d8      	uxtb	r0, r3
 800290c:	d00d      	beq.n	800292a <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002914:	6820      	ldr	r0, [r4, #0]
 8002916:	f000 fcad 	bl	8003274 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800291e:	bf0c      	ite	eq
 8002920:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002922:	2301      	movne	r3, #1
 8002924:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8002928:	2000      	movs	r0, #0
}
 800292a:	bd38      	pop	{r3, r4, r5, pc}

0800292c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800292c:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800292e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002932:	2b02      	cmp	r3, #2
{
 8002934:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002936:	b2d8      	uxtb	r0, r3
 8002938:	d009      	beq.n	800294e <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800293a:	2302      	movs	r3, #2
 800293c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002940:	6820      	ldr	r0, [r4, #0]
 8002942:	f000 fcbe 	bl	80032c2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002946:	2301      	movs	r3, #1
 8002948:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 800294c:	2000      	movs	r0, #0
}
 800294e:	bd10      	pop	{r4, pc}

08002950 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002950:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002954:	461f      	mov	r7, r3
 8002956:	4689      	mov	r9, r1
 8002958:	4690      	mov	r8, r2
 800295a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800295c:	f7fe fbf4 	bl	8001148 <HAL_GetTick>
 8002960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002962:	443b      	add	r3, r7
 8002964:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002966:	f7fe fbef 	bl	8001148 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800296c:	681e      	ldr	r6, [r3, #0]
 800296e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8002972:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002974:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002976:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002978:	6822      	ldr	r2, [r4, #0]
 800297a:	6893      	ldr	r3, [r2, #8]
 800297c:	ea39 0303 	bics.w	r3, r9, r3
 8002980:	bf0c      	ite	eq
 8002982:	2301      	moveq	r3, #1
 8002984:	2300      	movne	r3, #0
 8002986:	4543      	cmp	r3, r8
 8002988:	d101      	bne.n	800298e <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800298a:	2000      	movs	r0, #0
 800298c:	e02e      	b.n	80029ec <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800298e:	1c7b      	adds	r3, r7, #1
 8002990:	d0f3      	beq.n	800297a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002992:	f7fe fbd9 	bl	8001148 <HAL_GetTick>
 8002996:	eba0 000a 	sub.w	r0, r0, sl
 800299a:	42a8      	cmp	r0, r5
 800299c:	d329      	bcc.n	80029f2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029a6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029a8:	6862      	ldr	r2, [r4, #4]
 80029aa:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80029ae:	d10a      	bne.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0x76>
 80029b0:	68a2      	ldr	r2, [r4, #8]
 80029b2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80029b6:	d002      	beq.n	80029be <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029b8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80029bc:	d103      	bne.n	80029c6 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80029c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80029cc:	d107      	bne.n	80029de <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d4:	601a      	str	r2, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029dc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80029de:	2301      	movs	r3, #1
 80029e0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80029e4:	2300      	movs	r3, #0
 80029e6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 80029ea:	2003      	movs	r0, #3
}
 80029ec:	b002      	add	sp, #8
 80029ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80029f2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80029f4:	2b00      	cmp	r3, #0
      count--;
 80029f6:	9b01      	ldr	r3, [sp, #4]
 80029f8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
        tmp_timeout = 0U;
 80029fc:	bf08      	it	eq
 80029fe:	2500      	moveq	r5, #0
      count--;
 8002a00:	9301      	str	r3, [sp, #4]
 8002a02:	e7b9      	b.n	8002978 <SPI_WaitFlagStateUntilTimeout+0x28>
 8002a04:	20000078 	.word	0x20000078

08002a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a08:	b530      	push	{r4, r5, lr}
 8002a0a:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a0c:	4913      	ldr	r1, [pc, #76]	; (8002a5c <SPI_EndRxTxTransaction+0x54>)
 8002a0e:	4d14      	ldr	r5, [pc, #80]	; (8002a60 <SPI_EndRxTxTransaction+0x58>)
 8002a10:	6809      	ldr	r1, [r1, #0]
 8002a12:	fbb1 f5f5 	udiv	r5, r1, r5
{
 8002a16:	b085      	sub	sp, #20
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a1c:	4369      	muls	r1, r5
 8002a1e:	9103      	str	r1, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a20:	6841      	ldr	r1, [r0, #4]
 8002a22:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8002a26:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a28:	d10c      	bne.n	8002a44 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a2a:	9200      	str	r2, [sp, #0]
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f7ff ff8e 	bl	8002950 <SPI_WaitFlagStateUntilTimeout>
 8002a34:	b178      	cbz	r0, 8002a56 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a38:	f043 0320 	orr.w	r3, r3, #32
 8002a3c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a3e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002a40:	b005      	add	sp, #20
 8002a42:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8002a44:	9b03      	ldr	r3, [sp, #12]
 8002a46:	b133      	cbz	r3, 8002a56 <SPI_EndRxTxTransaction+0x4e>
      count--;
 8002a48:	9b03      	ldr	r3, [sp, #12]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	061b      	lsls	r3, r3, #24
 8002a54:	d4f6      	bmi.n	8002a44 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8002a56:	2000      	movs	r0, #0
 8002a58:	e7f2      	b.n	8002a40 <SPI_EndRxTxTransaction+0x38>
 8002a5a:	bf00      	nop
 8002a5c:	20000078 	.word	0x20000078
 8002a60:	016e3600 	.word	0x016e3600

08002a64 <SPI_EndRxTransaction>:
{
 8002a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a66:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a68:	6841      	ldr	r1, [r0, #4]
 8002a6a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8002a6e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a70:	d122      	bne.n	8002ab8 <SPI_EndRxTransaction+0x54>
 8002a72:	6881      	ldr	r1, [r0, #8]
 8002a74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002a78:	d002      	beq.n	8002a80 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a7a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002a7e:	d107      	bne.n	8002a90 <SPI_EndRxTransaction+0x2c>
    __HAL_SPI_DISABLE(hspi);
 8002a80:	6825      	ldr	r5, [r4, #0]
 8002a82:	6828      	ldr	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002a88:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002a8c:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002a8e:	d009      	beq.n	8002aa4 <SPI_EndRxTransaction+0x40>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a90:	9200      	str	r2, [sp, #0]
 8002a92:	2180      	movs	r1, #128	; 0x80
 8002a94:	2200      	movs	r2, #0
 8002a96:	4620      	mov	r0, r4
 8002a98:	f7ff ff5a 	bl	8002950 <SPI_WaitFlagStateUntilTimeout>
 8002a9c:	b930      	cbnz	r0, 8002aac <SPI_EndRxTransaction+0x48>
  return HAL_OK;
 8002a9e:	2000      	movs	r0, #0
}
 8002aa0:	b003      	add	sp, #12
 8002aa2:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa4:	9200      	str	r2, [sp, #0]
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	e7f4      	b.n	8002a96 <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002aae:	f043 0320 	orr.w	r3, r3, #32
 8002ab2:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	e7f3      	b.n	8002aa0 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	9200      	str	r2, [sp, #0]
 8002aba:	2101      	movs	r1, #1
 8002abc:	2200      	movs	r2, #0
 8002abe:	e7eb      	b.n	8002a98 <SPI_EndRxTransaction+0x34>

08002ac0 <HAL_SPI_MspInit>:
}
 8002ac0:	4770      	bx	lr

08002ac2 <HAL_SPI_Init>:
{
 8002ac2:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d05a      	beq.n	8002b80 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002aca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d153      	bne.n	8002b78 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ad0:	6842      	ldr	r2, [r0, #4]
 8002ad2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002ad6:	d000      	beq.n	8002ada <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad8:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ada:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002ade:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ae2:	b923      	cbnz	r3, 8002aee <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8002ae4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7ff ffe9 	bl	8002ac0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8002aee:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002af0:	68a5      	ldr	r5, [r4, #8]
 8002af2:	69a2      	ldr	r2, [r4, #24]
 8002af4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 8002af6:	2302      	movs	r3, #2
 8002af8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002afc:	680b      	ldr	r3, [r1, #0]
 8002afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b02:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b04:	6863      	ldr	r3, [r4, #4]
 8002b06:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 8002b0a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002b0e:	432b      	orrs	r3, r5
 8002b10:	68e5      	ldr	r5, [r4, #12]
 8002b12:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 8002b16:	432b      	orrs	r3, r5
 8002b18:	6925      	ldr	r5, [r4, #16]
 8002b1a:	f005 0502 	and.w	r5, r5, #2
 8002b1e:	432b      	orrs	r3, r5
 8002b20:	6965      	ldr	r5, [r4, #20]
 8002b22:	f005 0501 	and.w	r5, r5, #1
 8002b26:	432b      	orrs	r3, r5
 8002b28:	f402 7500 	and.w	r5, r2, #512	; 0x200
 8002b2c:	432b      	orrs	r3, r5
 8002b2e:	69e5      	ldr	r5, [r4, #28]
 8002b30:	f005 0538 	and.w	r5, r5, #56	; 0x38
 8002b34:	432b      	orrs	r3, r5
 8002b36:	6a25      	ldr	r5, [r4, #32]
 8002b38:	f005 0580 	and.w	r5, r5, #128	; 0x80
 8002b3c:	432b      	orrs	r3, r5
 8002b3e:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 8002b42:	432b      	orrs	r3, r5
 8002b44:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b48:	0c12      	lsrs	r2, r2, #16
 8002b4a:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b4e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b52:	f002 0204 	and.w	r2, r2, #4
 8002b56:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002b5a:	bf08      	it	eq
 8002b5c:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b5e:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002b60:	bf08      	it	eq
 8002b62:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b64:	69cb      	ldr	r3, [r1, #28]
 8002b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b6a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b6c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002b6e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b70:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b72:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8002b76:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b78:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b7e:	e7ac      	b.n	8002ada <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002b80:	2001      	movs	r0, #1
 8002b82:	e7f8      	b.n	8002b76 <HAL_SPI_Init+0xb4>

08002b84 <HAL_SPI_MspDeInit>:
 8002b84:	4770      	bx	lr

08002b86 <HAL_SPI_DeInit>:
{
 8002b86:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002b88:	4604      	mov	r4, r0
 8002b8a:	b180      	cbz	r0, 8002bae <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8002b8c:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002b94:	6813      	ldr	r3, [r2, #0]
 8002b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b9a:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8002b9c:	f7ff fff2 	bl	8002b84 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8002ba4:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8002ba8:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8002bac:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002bae:	2001      	movs	r0, #1
 8002bb0:	e7fc      	b.n	8002bac <HAL_SPI_DeInit+0x26>

08002bb2 <HAL_SPI_Transmit>:
{
 8002bb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002bb6:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8002bb8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002bbc:	2b01      	cmp	r3, #1
{
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	460e      	mov	r6, r1
 8002bc2:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002bc4:	f000 80b3 	beq.w	8002d2e <HAL_SPI_Transmit+0x17c>
 8002bc8:	2301      	movs	r3, #1
 8002bca:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002bce:	f7fe fabb 	bl	8001148 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bd2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002bd6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002bd8:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	f040 80a5 	bne.w	8002d2a <HAL_SPI_Transmit+0x178>
  if ((pData == NULL) || (Size == 0U))
 8002be0:	2e00      	cmp	r6, #0
 8002be2:	d077      	beq.n	8002cd4 <HAL_SPI_Transmit+0x122>
 8002be4:	f1b8 0f00 	cmp.w	r8, #0
 8002be8:	d074      	beq.n	8002cd4 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bea:	2303      	movs	r3, #3
 8002bec:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8002bf4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8002bf8:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bfc:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bfe:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002c00:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c02:	68a3      	ldr	r3, [r4, #8]
 8002c04:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c06:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8002c0c:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c10:	d107      	bne.n	8002c22 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8002c12:	682b      	ldr	r3, [r5, #0]
 8002c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c18:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 8002c1a:	682b      	ldr	r3, [r5, #0]
 8002c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c20:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c28:	d107      	bne.n	8002c3a <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 8002c2a:	682b      	ldr	r3, [r5, #0]
 8002c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c30:	602b      	str	r3, [r5, #0]
 8002c32:	682b      	ldr	r3, [r5, #0]
 8002c34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c38:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3a:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c3c:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002c40:	bf5e      	ittt	pl
 8002c42:	682b      	ldrpl	r3, [r5, #0]
 8002c44:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002c48:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c4a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	d149      	bne.n	8002ce6 <HAL_SPI_Transmit+0x134>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c52:	b113      	cbz	r3, 8002c5a <HAL_SPI_Transmit+0xa8>
 8002c54:	f1b8 0f01 	cmp.w	r8, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c5a:	f836 3b02 	ldrh.w	r3, [r6], #2
 8002c5e:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c60:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002c62:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c64:	3b01      	subs	r3, #1
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002c6a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	b9f3      	cbnz	r3, 8002cae <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c76:	d104      	bne.n	8002c82 <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	6813      	ldr	r3, [r2, #0]
 8002c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c80:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c82:	464a      	mov	r2, r9
 8002c84:	4639      	mov	r1, r7
 8002c86:	4620      	mov	r0, r4
 8002c88:	f7ff febe 	bl	8002a08 <SPI_EndRxTxTransaction>
 8002c8c:	b108      	cbz	r0, 8002c92 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c8e:	2320      	movs	r3, #32
 8002c90:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c92:	68a3      	ldr	r3, [r4, #8]
 8002c94:	b933      	cbnz	r3, 8002ca4 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	9201      	str	r2, [sp, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	9301      	str	r3, [sp, #4]
 8002ca2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8002ca6:	3800      	subs	r0, #0
 8002ca8:	bf18      	it	ne
 8002caa:	2001      	movne	r0, #1
error:
 8002cac:	e012      	b.n	8002cd4 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002cae:	6822      	ldr	r2, [r4, #0]
 8002cb0:	6893      	ldr	r3, [r2, #8]
 8002cb2:	0798      	lsls	r0, r3, #30
 8002cb4:	d505      	bpl.n	8002cc2 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cb8:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002cbc:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8002cc0:	e7cf      	b.n	8002c62 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc2:	f7fe fa41 	bl	8001148 <HAL_GetTick>
 8002cc6:	eba0 0009 	sub.w	r0, r0, r9
 8002cca:	42b8      	cmp	r0, r7
 8002ccc:	d3cd      	bcc.n	8002c6a <HAL_SPI_Transmit+0xb8>
 8002cce:	1c79      	adds	r1, r7, #1
 8002cd0:	d0cb      	beq.n	8002c6a <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8002cd2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002ce0:	b003      	add	sp, #12
 8002ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce6:	b113      	cbz	r3, 8002cee <HAL_SPI_Transmit+0x13c>
 8002ce8:	f1b8 0f01 	cmp.w	r8, #1
 8002cec:	d108      	bne.n	8002d00 <HAL_SPI_Transmit+0x14e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cee:	7833      	ldrb	r3, [r6, #0]
 8002cf0:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002cf8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002d00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0b3      	beq.n	8002c70 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d08:	6823      	ldr	r3, [r4, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	0792      	lsls	r2, r2, #30
 8002d0e:	d503      	bpl.n	8002d18 <HAL_SPI_Transmit+0x166>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d10:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d12:	7812      	ldrb	r2, [r2, #0]
 8002d14:	731a      	strb	r2, [r3, #12]
 8002d16:	e7ec      	b.n	8002cf2 <HAL_SPI_Transmit+0x140>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d18:	f7fe fa16 	bl	8001148 <HAL_GetTick>
 8002d1c:	eba0 0009 	sub.w	r0, r0, r9
 8002d20:	42b8      	cmp	r0, r7
 8002d22:	d3ed      	bcc.n	8002d00 <HAL_SPI_Transmit+0x14e>
 8002d24:	1c7b      	adds	r3, r7, #1
 8002d26:	d0eb      	beq.n	8002d00 <HAL_SPI_Transmit+0x14e>
 8002d28:	e7d3      	b.n	8002cd2 <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 8002d2a:	2002      	movs	r0, #2
 8002d2c:	e7d2      	b.n	8002cd4 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 8002d2e:	2002      	movs	r0, #2
 8002d30:	e7d6      	b.n	8002ce0 <HAL_SPI_Transmit+0x12e>

08002d32 <HAL_SPI_TransmitReceive>:
{
 8002d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d36:	b085      	sub	sp, #20
 8002d38:	4698      	mov	r8, r3
  __IO uint32_t tmpreg = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 8002d3e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8002d42:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8002d44:	2b01      	cmp	r3, #1
{
 8002d46:	4604      	mov	r4, r0
 8002d48:	460d      	mov	r5, r1
 8002d4a:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8002d4c:	f000 8133 	beq.w	8002fb6 <HAL_SPI_TransmitReceive+0x284>
 8002d50:	2301      	movs	r3, #1
 8002d52:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002d56:	f7fe f9f7 	bl	8001148 <HAL_GetTick>
  tmp_state           = hspi->State;
 8002d5a:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8002d5e:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d60:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8002d62:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8002d64:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d66:	d00a      	beq.n	8002d7e <HAL_SPI_TransmitReceive+0x4c>
 8002d68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6c:	f040 8121 	bne.w	8002fb2 <HAL_SPI_TransmitReceive+0x280>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d70:	68a2      	ldr	r2, [r4, #8]
 8002d72:	2a00      	cmp	r2, #0
 8002d74:	f040 811d 	bne.w	8002fb2 <HAL_SPI_TransmitReceive+0x280>
 8002d78:	2904      	cmp	r1, #4
 8002d7a:	f040 811a 	bne.w	8002fb2 <HAL_SPI_TransmitReceive+0x280>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d7e:	2d00      	cmp	r5, #0
 8002d80:	f000 8109 	beq.w	8002f96 <HAL_SPI_TransmitReceive+0x264>
 8002d84:	f1b9 0f00 	cmp.w	r9, #0
 8002d88:	f000 8105 	beq.w	8002f96 <HAL_SPI_TransmitReceive+0x264>
 8002d8c:	f1b8 0f00 	cmp.w	r8, #0
 8002d90:	f000 8101 	beq.w	8002f96 <HAL_SPI_TransmitReceive+0x264>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d94:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d98:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d9a:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d9e:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002da0:	bf1c      	itt	ne
 8002da2:	2205      	movne	r2, #5
 8002da4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002da8:	2200      	movs	r2, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002daa:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dae:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8002db0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002db4:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002dbe:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002dc0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002dc4:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc8:	d107      	bne.n	8002dda <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 8002dca:	6811      	ldr	r1, [r2, #0]
 8002dcc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	6811      	ldr	r1, [r2, #0]
 8002dd4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002dd8:	6011      	str	r1, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dda:	6811      	ldr	r1, [r2, #0]
 8002ddc:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8002dde:	bf5e      	ittt	pl
 8002de0:	6811      	ldrpl	r1, [r2, #0]
 8002de2:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
 8002de6:	6011      	strpl	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002de8:	68e1      	ldr	r1, [r4, #12]
 8002dea:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002dee:	d168      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002df0:	b113      	cbz	r3, 8002df8 <HAL_SPI_TransmitReceive+0xc6>
 8002df2:	f1b8 0f01 	cmp.w	r8, #1
 8002df6:	d107      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002df8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002dfc:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8002dfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e00:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002e08:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	b9b3      	cbnz	r3, 8002e3e <HAL_SPI_TransmitReceive+0x10c>
 8002e10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	b99b      	cbnz	r3, 8002e3e <HAL_SPI_TransmitReceive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e1c:	f040 80a6 	bne.w	8002f6c <HAL_SPI_TransmitReceive+0x23a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002e20:	2201      	movs	r2, #1
 8002e22:	9700      	str	r7, [sp, #0]
 8002e24:	4633      	mov	r3, r6
 8002e26:	4611      	mov	r1, r2
 8002e28:	4620      	mov	r0, r4
 8002e2a:	f7ff fd91 	bl	8002950 <SPI_WaitFlagStateUntilTimeout>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	f000 8098 	beq.w	8002f64 <HAL_SPI_TransmitReceive+0x232>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e36:	f043 0302 	orr.w	r3, r3, #2
 8002e3a:	6563      	str	r3, [r4, #84]	; 0x54
 8002e3c:	e020      	b.n	8002e80 <HAL_SPI_TransmitReceive+0x14e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e3e:	6822      	ldr	r2, [r4, #0]
 8002e40:	6893      	ldr	r3, [r2, #8]
 8002e42:	079b      	lsls	r3, r3, #30
 8002e44:	d504      	bpl.n	8002e50 <HAL_SPI_TransmitReceive+0x11e>
 8002e46:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	b10b      	cbz	r3, 8002e50 <HAL_SPI_TransmitReceive+0x11e>
 8002e4c:	bb1d      	cbnz	r5, 8002e96 <HAL_SPI_TransmitReceive+0x164>
{
 8002e4e:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e50:	6891      	ldr	r1, [r2, #8]
 8002e52:	f011 0101 	ands.w	r1, r1, #1
 8002e56:	d00c      	beq.n	8002e72 <HAL_SPI_TransmitReceive+0x140>
 8002e58:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b14b      	cbz	r3, 8002e72 <HAL_SPI_TransmitReceive+0x140>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e60:	68d2      	ldr	r2, [r2, #12]
 8002e62:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e66:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002e68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002e70:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e72:	f7fe f969 	bl	8001148 <HAL_GetTick>
 8002e76:	1bc0      	subs	r0, r0, r7
 8002e78:	42b0      	cmp	r0, r6
 8002e7a:	d3c6      	bcc.n	8002e0a <HAL_SPI_TransmitReceive+0xd8>
 8002e7c:	1c70      	adds	r0, r6, #1
 8002e7e:	d0c4      	beq.n	8002e0a <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8002e80:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002e8e:	4628      	mov	r0, r5
 8002e90:	b005      	add	sp, #20
 8002e92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e98:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002e9c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002ea0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002ea8:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8002eaa:	b2ad      	uxth	r5, r5
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	d1ce      	bne.n	8002e4e <HAL_SPI_TransmitReceive+0x11c>
 8002eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eb6:	d1ca      	bne.n	8002e4e <HAL_SPI_TransmitReceive+0x11c>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e7c6      	b.n	8002e50 <HAL_SPI_TransmitReceive+0x11e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ec2:	b113      	cbz	r3, 8002eca <HAL_SPI_TransmitReceive+0x198>
 8002ec4:	f1b8 0f01 	cmp.w	r8, #1
 8002ec8:	d108      	bne.n	8002edc <HAL_SPI_TransmitReceive+0x1aa>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eca:	782b      	ldrb	r3, [r5, #0]
 8002ecc:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ece:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8002edc:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ede:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b91b      	cbnz	r3, 8002eec <HAL_SPI_TransmitReceive+0x1ba>
 8002ee4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d094      	beq.n	8002e16 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eec:	6822      	ldr	r2, [r4, #0]
 8002eee:	6893      	ldr	r3, [r2, #8]
 8002ef0:	0799      	lsls	r1, r3, #30
 8002ef2:	d504      	bpl.n	8002efe <HAL_SPI_TransmitReceive+0x1cc>
 8002ef4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	b10b      	cbz	r3, 8002efe <HAL_SPI_TransmitReceive+0x1cc>
 8002efa:	b9dd      	cbnz	r5, 8002f34 <HAL_SPI_TransmitReceive+0x202>
        txallowed = 1U;
 8002efc:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	6891      	ldr	r1, [r2, #8]
 8002f02:	f011 0101 	ands.w	r1, r1, #1
 8002f06:	d00d      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x1f2>
 8002f08:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b153      	cbz	r3, 8002f24 <HAL_SPI_TransmitReceive+0x1f2>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f10:	68d2      	ldr	r2, [r2, #12]
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002f14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f16:	3301      	adds	r3, #1
 8002f18:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002f1a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002f22:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002f24:	f7fe f910 	bl	8001148 <HAL_GetTick>
 8002f28:	1bc0      	subs	r0, r0, r7
 8002f2a:	42b0      	cmp	r0, r6
 8002f2c:	d3d7      	bcc.n	8002ede <HAL_SPI_TransmitReceive+0x1ac>
 8002f2e:	1c73      	adds	r3, r6, #1
 8002f30:	d0d5      	beq.n	8002ede <HAL_SPI_TransmitReceive+0x1ac>
 8002f32:	e7a5      	b.n	8002e80 <HAL_SPI_TransmitReceive+0x14e>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8002f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f40:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002f48:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8002f4a:	b2ad      	uxth	r5, r5
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	d1d5      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x1ca>
 8002f50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f56:	d1d1      	bne.n	8002efc <HAL_SPI_TransmitReceive+0x1ca>
 8002f58:	6822      	ldr	r2, [r4, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002f5a:	6813      	ldr	r3, [r2, #0]
 8002f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e7cc      	b.n	8002efe <HAL_SPI_TransmitReceive+0x1cc>
    tmpreg = READ_REG(hspi->Instance->DR);
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8002f6a:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002f6c:	6822      	ldr	r2, [r4, #0]
 8002f6e:	6895      	ldr	r5, [r2, #8]
 8002f70:	f015 0510 	ands.w	r5, r5, #16
 8002f74:	d007      	beq.n	8002f86 <HAL_SPI_TransmitReceive+0x254>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002f76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f78:	f043 0302 	orr.w	r3, r3, #2
 8002f7c:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002f7e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002f82:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8002f84:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f86:	463a      	mov	r2, r7
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f7ff fd3c 	bl	8002a08 <SPI_EndRxTxTransaction>
 8002f90:	b118      	cbz	r0, 8002f9a <HAL_SPI_TransmitReceive+0x268>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f92:	2320      	movs	r3, #32
 8002f94:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002f96:	2501      	movs	r5, #1
 8002f98:	e773      	b.n	8002e82 <HAL_SPI_TransmitReceive+0x150>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f9a:	68a3      	ldr	r3, [r4, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f47f af70 	bne.w	8002e82 <HAL_SPI_TransmitReceive+0x150>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fa2:	9303      	str	r3, [sp, #12]
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	9203      	str	r2, [sp, #12]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	9303      	str	r3, [sp, #12]
 8002fae:	9b03      	ldr	r3, [sp, #12]
 8002fb0:	e767      	b.n	8002e82 <HAL_SPI_TransmitReceive+0x150>
    errorcode = HAL_BUSY;
 8002fb2:	2502      	movs	r5, #2
 8002fb4:	e765      	b.n	8002e82 <HAL_SPI_TransmitReceive+0x150>
  __HAL_LOCK(hspi);
 8002fb6:	2502      	movs	r5, #2
 8002fb8:	e769      	b.n	8002e8e <HAL_SPI_TransmitReceive+0x15c>

08002fba <HAL_SPI_Receive>:
{
 8002fba:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002fbe:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fc4:	6843      	ldr	r3, [r0, #4]
 8002fc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002fca:	4604      	mov	r4, r0
 8002fcc:	4688      	mov	r8, r1
 8002fce:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fd0:	d10c      	bne.n	8002fec <HAL_SPI_Receive+0x32>
 8002fd2:	6883      	ldr	r3, [r0, #8]
 8002fd4:	b953      	cbnz	r3, 8002fec <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002fd6:	2304      	movs	r3, #4
 8002fd8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002fdc:	4613      	mov	r3, r2
 8002fde:	9500      	str	r5, [sp, #0]
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	f7ff fea6 	bl	8002d32 <HAL_SPI_TransmitReceive>
}
 8002fe6:	b004      	add	sp, #16
 8002fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002fec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f000 80c7 	beq.w	8003184 <HAL_SPI_Receive+0x1ca>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8002ffc:	f7fe f8a4 	bl	8001148 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003000:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003004:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003006:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003008:	b2d8      	uxtb	r0, r3
 800300a:	f040 80b9 	bne.w	8003180 <HAL_SPI_Receive+0x1c6>
  if ((pData == NULL) || (Size == 0U))
 800300e:	f1b8 0f00 	cmp.w	r8, #0
 8003012:	f000 808a 	beq.w	800312a <HAL_SPI_Receive+0x170>
 8003016:	2f00      	cmp	r7, #0
 8003018:	f000 8087 	beq.w	800312a <HAL_SPI_Receive+0x170>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800301c:	2304      	movs	r3, #4
 800301e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003022:	2300      	movs	r3, #0
 8003024:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003026:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800302a:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800302c:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800302e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003030:	86e3      	strh	r3, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003034:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003036:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 800303e:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003040:	d10b      	bne.n	800305a <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 8003042:	6813      	ldr	r3, [r2, #0]
 8003044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	6813      	ldr	r3, [r2, #0]
 800304c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003050:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8003052:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003054:	3b01      	subs	r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800305a:	68a3      	ldr	r3, [r4, #8]
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	d107      	bne.n	8003072 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8003062:	6813      	ldr	r3, [r2, #0]
 8003064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003068:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003070:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003076:	bf5e      	ittt	pl
 8003078:	6813      	ldrpl	r3, [r2, #0]
 800307a:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800307e:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003080:	68e3      	ldr	r3, [r4, #12]
 8003082:	b1f3      	cbz	r3, 80030c2 <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8003084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	b1fb      	cbz	r3, 80030ca <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	07d1      	lsls	r1, r2, #31
 8003090:	d552      	bpl.n	8003138 <HAL_SPI_Receive+0x17e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003096:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800309a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800309c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80030a4:	e7ee      	b.n	8003084 <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	07d7      	lsls	r7, r2, #31
 80030ac:	d535      	bpl.n	800311a <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030b0:	7b1b      	ldrb	r3, [r3, #12]
 80030b2:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80030b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030b6:	3301      	adds	r3, #1
 80030b8:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80030ba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29b      	uxth	r3, r3
 80030c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80030c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1ed      	bne.n	80030a6 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030d0:	d13e      	bne.n	8003150 <HAL_SPI_Receive+0x196>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	6813      	ldr	r3, [r2, #0]
 80030d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030da:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80030dc:	2201      	movs	r2, #1
 80030de:	9600      	str	r6, [sp, #0]
 80030e0:	462b      	mov	r3, r5
 80030e2:	4611      	mov	r1, r2
 80030e4:	4620      	mov	r0, r4
 80030e6:	f7ff fc33 	bl	8002950 <SPI_WaitFlagStateUntilTimeout>
 80030ea:	b9e8      	cbnz	r0, 8003128 <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030ec:	68e1      	ldr	r1, [r4, #12]
 80030ee:	6822      	ldr	r2, [r4, #0]
 80030f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80030f2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030f6:	bf0b      	itete	eq
 80030f8:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030fa:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030fc:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80030fe:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003100:	2201      	movs	r2, #1
 8003102:	9600      	str	r6, [sp, #0]
 8003104:	462b      	mov	r3, r5
 8003106:	4611      	mov	r1, r2
 8003108:	4620      	mov	r0, r4
 800310a:	f7ff fc21 	bl	8002950 <SPI_WaitFlagStateUntilTimeout>
 800310e:	b1d8      	cbz	r0, 8003148 <HAL_SPI_Receive+0x18e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003110:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003112:	f043 0302 	orr.w	r3, r3, #2
 8003116:	6563      	str	r3, [r4, #84]	; 0x54
 8003118:	e006      	b.n	8003128 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800311a:	f7fe f815 	bl	8001148 <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	42a8      	cmp	r0, r5
 8003122:	d3ce      	bcc.n	80030c2 <HAL_SPI_Receive+0x108>
 8003124:	1c68      	adds	r0, r5, #1
 8003126:	d0cc      	beq.n	80030c2 <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8003128:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800312a:	2301      	movs	r3, #1
 800312c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003130:	2300      	movs	r3, #0
 8003132:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8003136:	e756      	b.n	8002fe6 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003138:	f7fe f806 	bl	8001148 <HAL_GetTick>
 800313c:	1b80      	subs	r0, r0, r6
 800313e:	42a8      	cmp	r0, r5
 8003140:	d3a0      	bcc.n	8003084 <HAL_SPI_Receive+0xca>
 8003142:	1c6a      	adds	r2, r5, #1
 8003144:	d09e      	beq.n	8003084 <HAL_SPI_Receive+0xca>
 8003146:	e7ef      	b.n	8003128 <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 800314e:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003150:	4632      	mov	r2, r6
 8003152:	4629      	mov	r1, r5
 8003154:	4620      	mov	r0, r4
 8003156:	f7ff fc85 	bl	8002a64 <SPI_EndRxTransaction>
 800315a:	b108      	cbz	r0, 8003160 <HAL_SPI_Receive+0x1a6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800315c:	2320      	movs	r3, #32
 800315e:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6893      	ldr	r3, [r2, #8]
 8003164:	06db      	lsls	r3, r3, #27
 8003166:	d506      	bpl.n	8003176 <HAL_SPI_Receive+0x1bc>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003170:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003174:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003176:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003178:	3800      	subs	r0, #0
 800317a:	bf18      	it	ne
 800317c:	2001      	movne	r0, #1
error :
 800317e:	e7d4      	b.n	800312a <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8003180:	2002      	movs	r0, #2
 8003182:	e7d2      	b.n	800312a <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8003184:	2002      	movs	r0, #2
 8003186:	e72e      	b.n	8002fe6 <HAL_SPI_Receive+0x2c>

08003188 <HAL_SPI_GetState>:
  return hspi->State;
 8003188:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800318c:	4770      	bx	lr
	...

08003190 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003194:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8003196:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800319a:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 800319e:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 80031a2:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	2901      	cmp	r1, #1
 80031aa:	ea43 0304 	orr.w	r3, r3, r4
 80031ae:	4912      	ldr	r1, [pc, #72]	; (80031f8 <FMC_SDRAM_Init+0x68>)
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80031b0:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80031b2:	d00f      	beq.n	80031d4 <FMC_SDRAM_Init+0x44>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80031b4:	431a      	orrs	r2, r3
 80031b6:	432a      	orrs	r2, r5
 80031b8:	ea42 0308 	orr.w	r3, r2, r8
 80031bc:	ea43 030e 	orr.w	r3, r3, lr
 80031c0:	ea43 030c 	orr.w	r3, r3, ip
 80031c4:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80031c6:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80031c8:	4333      	orrs	r3, r6
 80031ca:	430b      	orrs	r3, r1
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80031cc:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 80031ce:	2000      	movs	r0, #0
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80031d4:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80031d6:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80031d8:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80031da:	ea45 0208 	orr.w	r2, r5, r8
 80031de:	ea42 020e 	orr.w	r2, r2, lr
 80031e2:	ea42 020c 	orr.w	r2, r2, ip
 80031e6:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80031e8:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80031ec:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80031ee:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80031f0:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80031f2:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80031f4:	6042      	str	r2, [r0, #4]
 80031f6:	e7ea      	b.n	80031ce <FMC_SDRAM_Init+0x3e>
 80031f8:	ffff8000 	.word	0xffff8000

080031fc <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80031fc:	68cb      	ldr	r3, [r1, #12]
{
 80031fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003200:	680c      	ldr	r4, [r1, #0]
 8003202:	688e      	ldr	r6, [r1, #8]
 8003204:	690d      	ldr	r5, [r1, #16]
 8003206:	1e5f      	subs	r7, r3, #1
 8003208:	694b      	ldr	r3, [r1, #20]
 800320a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800320e:	684c      	ldr	r4, [r1, #4]
 8003210:	6989      	ldr	r1, [r1, #24]
 8003212:	3b01      	subs	r3, #1
 8003214:	051b      	lsls	r3, r3, #20
 8003216:	3c01      	subs	r4, #1
 8003218:	3e01      	subs	r6, #1
 800321a:	3d01      	subs	r5, #1
 800321c:	3901      	subs	r1, #1
  if (Bank != FMC_SDRAM_BANK2) 
 800321e:	2a01      	cmp	r2, #1
 8003220:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8003224:	ea4f 2606 	mov.w	r6, r6, lsl #8
 8003228:	ea4f 4505 	mov.w	r5, r5, lsl #16
 800322c:	ea4f 6101 	mov.w	r1, r1, lsl #24
 8003230:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 8003234:	d00c      	beq.n	8003250 <FMC_SDRAM_Timing_Init+0x54>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003236:	ea43 030c 	orr.w	r3, r3, ip
 800323a:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800323c:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800323e:	4333      	orrs	r3, r6
 8003240:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003242:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8003246:	430b      	orrs	r3, r1
 8003248:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800324a:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 800324c:	2000      	movs	r0, #0
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8003250:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8003252:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 8003256:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800325a:	4334      	orrs	r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800325c:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800325e:	ea44 020c 	orr.w	r2, r4, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8003262:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8003264:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8003266:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8003268:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800326c:	430a      	orrs	r2, r1
 800326e:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8003270:	60c2      	str	r2, [r0, #12]
 8003272:	e7eb      	b.n	800324c <FMC_SDRAM_Timing_Init+0x50>

08003274 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003274:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	9301      	str	r3, [sp, #4]
{
 800327a:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800327c:	e9d1 3200 	ldrd	r3, r2, [r1]
 8003280:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 8003282:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8003284:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8003288:	688a      	ldr	r2, [r1, #8]
 800328a:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800328c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8003290:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8003292:	9b01      	ldr	r3, [sp, #4]
 8003294:	6103      	str	r3, [r0, #16]
{
 8003296:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003298:	f7fd ff56 	bl	8001148 <HAL_GetTick>
 800329c:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800329e:	69a3      	ldr	r3, [r4, #24]
 80032a0:	f013 0320 	ands.w	r3, r3, #32
 80032a4:	d101      	bne.n	80032aa <FMC_SDRAM_SendCommand+0x36>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80032a6:	4618      	mov	r0, r3
 80032a8:	e003      	b.n	80032b2 <FMC_SDRAM_SendCommand+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 80032aa:	1c6b      	adds	r3, r5, #1
 80032ac:	d0f7      	beq.n	800329e <FMC_SDRAM_SendCommand+0x2a>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80032ae:	b915      	cbnz	r5, 80032b6 <FMC_SDRAM_SendCommand+0x42>
        return HAL_TIMEOUT;
 80032b0:	2003      	movs	r0, #3
}
 80032b2:	b002      	add	sp, #8
 80032b4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80032b6:	f7fd ff47 	bl	8001148 <HAL_GetTick>
 80032ba:	1b80      	subs	r0, r0, r6
 80032bc:	42a8      	cmp	r0, r5
 80032be:	d9ee      	bls.n	800329e <FMC_SDRAM_SendCommand+0x2a>
 80032c0:	e7f6      	b.n	80032b0 <FMC_SDRAM_SendCommand+0x3c>

080032c2 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80032c2:	6943      	ldr	r3, [r0, #20]
 80032c4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80032c8:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80032ca:	2000      	movs	r0, #0
 80032cc:	4770      	bx	lr
	...

080032d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032d0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032d2:	0189      	lsls	r1, r1, #6
  __IO uint32_t count = 0U;
 80032d4:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032d6:	f041 0120 	orr.w	r1, r1, #32

  do
  {
    if (++count > 200000U)
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <USB_FlushTxFifo+0x2c>)
  __IO uint32_t count = 0U;
 80032dc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032de:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80032e0:	9b01      	ldr	r3, [sp, #4]
 80032e2:	3301      	adds	r3, #1
 80032e4:	4293      	cmp	r3, r2
 80032e6:	9301      	str	r3, [sp, #4]
 80032e8:	d806      	bhi.n	80032f8 <USB_FlushTxFifo+0x28>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ea:	6903      	ldr	r3, [r0, #16]
 80032ec:	f013 0320 	ands.w	r3, r3, #32
 80032f0:	d1f6      	bne.n	80032e0 <USB_FlushTxFifo+0x10>

  return HAL_OK;
 80032f2:	4618      	mov	r0, r3
}
 80032f4:	b002      	add	sp, #8
 80032f6:	4770      	bx	lr
      return HAL_TIMEOUT;
 80032f8:	2003      	movs	r0, #3
 80032fa:	e7fb      	b.n	80032f4 <USB_FlushTxFifo+0x24>
 80032fc:	00030d40 	.word	0x00030d40

08003300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003300:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003302:	2300      	movs	r3, #0
 8003304:	9301      	str	r3, [sp, #4]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;

  do
  {
    if (++count > 200000U)
 8003306:	4a08      	ldr	r2, [pc, #32]	; (8003328 <USB_FlushRxFifo+0x28>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003308:	2310      	movs	r3, #16
 800330a:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800330c:	9b01      	ldr	r3, [sp, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	4293      	cmp	r3, r2
 8003312:	9301      	str	r3, [sp, #4]
 8003314:	d806      	bhi.n	8003324 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003316:	6903      	ldr	r3, [r0, #16]
 8003318:	f013 0310 	ands.w	r3, r3, #16
 800331c:	d1f6      	bne.n	800330c <USB_FlushRxFifo+0xc>

  return HAL_OK;
 800331e:	4618      	mov	r0, r3
}
 8003320:	b002      	add	sp, #8
 8003322:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003324:	2003      	movs	r0, #3
 8003326:	e7fb      	b.n	8003320 <USB_FlushRxFifo+0x20>
 8003328:	00030d40 	.word	0x00030d40

0800332c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800332c:	b570      	push	{r4, r5, r6, lr}
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
  uint16_t remaining_bytes = len % 4U;

  for (i = 0U; i < count32b; i++)
 800332e:	2300      	movs	r3, #0
  uint32_t count32b = (uint32_t)len >> 2U;
 8003330:	0894      	lsrs	r4, r2, #2
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003332:	f500 5580 	add.w	r5, r0, #4096	; 0x1000
  uint16_t remaining_bytes = len % 4U;
 8003336:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800333a:	42a3      	cmp	r3, r4
 800333c:	d314      	bcc.n	8003368 <USB_ReadPacket+0x3c>
 800333e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    pDest++;
    pDest++;
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003342:	b17a      	cbz	r2, 8003364 <USB_ReadPacket+0x38>
  {
    i = 0U;
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003344:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    i = 0U;
 8003348:	2300      	movs	r3, #0
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800334a:	6804      	ldr	r4, [r0, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800334c:	00d8      	lsls	r0, r3, #3
 800334e:	fa24 f000 	lsr.w	r0, r4, r0
 8003352:	54c8      	strb	r0, [r1, r3]
      i++;
 8003354:	3301      	adds	r3, #1
      pDest++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 8003356:	b298      	uxth	r0, r3
 8003358:	4282      	cmp	r2, r0
 800335a:	d1f7      	bne.n	800334c <USB_ReadPacket+0x20>
 800335c:	3a01      	subs	r2, #1
 800335e:	b292      	uxth	r2, r2
 8003360:	3201      	adds	r2, #1
 8003362:	4411      	add	r1, r2
  }

  return ((void *)pDest);
}
 8003364:	4608      	mov	r0, r1
 8003366:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003368:	682e      	ldr	r6, [r5, #0]
 800336a:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
  for (i = 0U; i < count32b; i++)
 800336e:	3301      	adds	r3, #1
 8003370:	e7e3      	b.n	800333a <USB_ReadPacket+0xe>

08003372 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003372:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003374:	6980      	ldr	r0, [r0, #24]

  return tmpreg;
}
 8003376:	4010      	ands	r0, r2
 8003378:	4770      	bx	lr

0800337a <USB_GetMode>:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
  return ((USBx->GINTSTS) & 0x1U);
 800337a:	6940      	ldr	r0, [r0, #20]
}
 800337c:	f000 0001 	and.w	r0, r0, #1
 8003380:	4770      	bx	lr

08003382 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003382:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8003386:	f023 0303 	bic.w	r3, r3, #3
{
 800338a:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800338c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003390:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8003394:	f001 0303 	and.w	r3, r1, #3
 8003398:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 800339a:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800339c:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80033a0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80033a4:	d104      	bne.n	80033b0 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 80033a6:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80033aa:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80033ac:	2000      	movs	r0, #0
 80033ae:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80033b0:	2902      	cmp	r1, #2
 80033b2:	d1fb      	bne.n	80033ac <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 80033b4:	f241 7370 	movw	r3, #6000	; 0x1770
 80033b8:	e7f7      	b.n	80033aa <USB_InitFSLSPClkSel+0x28>

080033ba <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80033ba:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80033be:	6940      	ldr	r0, [r0, #20]
}
 80033c0:	b280      	uxth	r0, r0
 80033c2:	4770      	bx	lr

080033c4 <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80033c4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 80033c8:	b530      	push	{r4, r5, lr}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80033ca:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80033ce:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80033d2:	6885      	ldr	r5, [r0, #8]
 80033d4:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80033d6:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80033da:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80033de:	d501      	bpl.n	80033e4 <USB_HC_Halt+0x20>
 80033e0:	2c00      	cmp	r4, #0
 80033e2:	da28      	bge.n	8003436 <USB_HC_Halt+0x72>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80033e4:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80033e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80033ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033f0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80033f4:	d121      	bne.n	800343a <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80033f6:	6883      	ldr	r3, [r0, #8]
 80033f8:	069b      	lsls	r3, r3, #26
 80033fa:	d41c      	bmi.n	8003436 <USB_HC_Halt+0x72>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80033fc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80033fe:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003402:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003406:	d137      	bne.n	8003478 <USB_HC_Halt+0xb4>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003408:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003410:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003414:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003418:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800341c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003420:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003424:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003428:	f240 33e9 	movw	r3, #1001	; 0x3e9
        do
        {
          if (++count > 1000U)
 800342c:	3b01      	subs	r3, #1
 800342e:	d002      	beq.n	8003436 <USB_HC_Halt+0x72>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003430:	6811      	ldr	r1, [r2, #0]
 8003432:	2900      	cmp	r1, #0
 8003434:	dbfa      	blt.n	800342c <USB_HC_Halt+0x68>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003436:	2000      	movs	r0, #0
 8003438:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800343a:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800343e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003442:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003446:	d117      	bne.n	8003478 <USB_HC_Halt+0xb4>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003448:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800344c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003450:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003458:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800345c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003460:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003464:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003468:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 800346c:	3b01      	subs	r3, #1
 800346e:	d0e2      	beq.n	8003436 <USB_HC_Halt+0x72>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	2900      	cmp	r1, #0
 8003474:	dbfa      	blt.n	800346c <USB_HC_Halt+0xa8>
 8003476:	e7de      	b.n	8003436 <USB_HC_Halt+0x72>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003478:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800347c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003480:	e7d9      	b.n	8003436 <USB_HC_Halt+0x72>

08003482 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003482:	6883      	ldr	r3, [r0, #8]
 8003484:	f023 0301 	bic.w	r3, r3, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003488:	b510      	push	{r4, lr}
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800348a:	2110      	movs	r1, #16
{
 800348c:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800348e:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8003490:	f7ff ff1e 	bl	80032d0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003494:	4620      	mov	r0, r4
 8003496:	f7ff ff33 	bl	8003300 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800349a:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 800349e:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);
 80034a2:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 80034a4:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80034a6:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 80034aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80034ae:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 80034b2:	4281      	cmp	r1, r0
 80034b4:	d1f6      	bne.n	80034a4 <USB_StopHost+0x22>
  uint32_t count = 0U;
 80034b6:	2100      	movs	r1, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80034b8:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80034ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034be:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80034c2:	601a      	str	r2, [r3, #0]

    do
    {
      if (++count > 1000U)
 80034c4:	3101      	adds	r1, #1
 80034c6:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80034ca:	d802      	bhi.n	80034d2 <USB_StopHost+0x50>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	2a00      	cmp	r2, #0
 80034d0:	dbf8      	blt.n	80034c4 <USB_StopHost+0x42>
  for (i = 0U; i <= 15U; i++)
 80034d2:	3320      	adds	r3, #32
 80034d4:	4283      	cmp	r3, r0
 80034d6:	d1ef      	bne.n	80034b8 <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034dc:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80034e0:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80034e2:	68a3      	ldr	r3, [r4, #8]
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80034ea:	2000      	movs	r0, #0
 80034ec:	bd10      	pop	{r4, pc}
	...

080034f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80034f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003528 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034f6:	e003      	b.n	8003500 <LoopCopyDataInit>

080034f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034fe:	3104      	adds	r1, #4

08003500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003500:	480b      	ldr	r0, [pc, #44]	; (8003530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003508:	d3f6      	bcc.n	80034f8 <CopyDataInit>
  ldr  r2, =_sbss
 800350a:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800350c:	e002      	b.n	8003514 <LoopFillZerobss>

0800350e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800350e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003510:	f842 3b04 	str.w	r3, [r2], #4

08003514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003518:	d3f9      	bcc.n	800350e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800351a:	f7fd fda5 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800351e:	f000 f975 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003522:	f000 f80f 	bl	8003544 <main>
  bx  lr    
 8003526:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003528:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800352c:	08007590 	.word	0x08007590
  ldr  r0, =_sdata
 8003530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003534:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8003538:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 800353c:	200038ec 	.word	0x200038ec

08003540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003540:	e7fe      	b.n	8003540 <ADC_IRQHandler>
	...

08003544 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b094      	sub	sp, #80	; 0x50
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003548:	2600      	movs	r6, #0
 800354a:	4d70      	ldr	r5, [pc, #448]	; (800370c <main+0x1c8>)
  hspi4.Instance = SPI4;
 800354c:	4c70      	ldr	r4, [pc, #448]	; (8003710 <main+0x1cc>)
 800354e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 8003728 <main+0x1e4>
  HAL_Init();
 8003552:	f7fd fdd3 	bl	80010fc <HAL_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003556:	9601      	str	r6, [sp, #4]
 8003558:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800355a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355e:	642b      	str	r3, [r5, #64]	; 0x40
 8003560:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	9301      	str	r3, [sp, #4]
 8003568:	9b01      	ldr	r3, [sp, #4]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800356a:	4b6a      	ldr	r3, [pc, #424]	; (8003714 <main+0x1d0>)
 800356c:	9602      	str	r6, [sp, #8]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800357c:	9302      	str	r3, [sp, #8]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800357e:	f04f 0801 	mov.w	r8, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003582:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003588:	2702      	movs	r7, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800358a:	e9cd 8308 	strd	r8, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800358e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003592:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003594:	e9cd 730e 	strd	r7, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003598:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800359c:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80035a0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80035a2:	2307      	movs	r3, #7
 80035a4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80035a6:	9712      	str	r7, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80035a8:	f7fe fde8 	bl	800217c <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80035ac:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035ae:	e9cd 3703 	strd	r3, r7, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80035b2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80035b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035ba:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80035be:	2105      	movs	r1, #5
 80035c0:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035c2:	9605      	str	r6, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80035c4:	f7fe ffb4 	bl	8002530 <HAL_RCC_ClockConfig>
  BSP_LED_Init(LED3);
 80035c8:	4630      	mov	r0, r6
 80035ca:	f7fd f94d 	bl	8000868 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80035ce:	4640      	mov	r0, r8
 80035d0:	f7fd f94a 	bl	8000868 <BSP_LED_Init>
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80035d4:	f44f 6c80 	mov.w	ip, #1024	; 0x400
 80035d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035dc:	e9c4 c302 	strd	ip, r3, [r4, #8]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80035e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035e4:	61a3      	str	r3, [r4, #24]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80035e6:	4620      	mov	r0, r4
  hspi4.Init.CRCPolynomial = 10;
 80035e8:	230a      	movs	r3, #10
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80035ea:	e9c4 9600 	strd	r9, r6, [r4]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ee:	e9c4 6608 	strd	r6, r6, [r4, #32]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f2:	62a6      	str	r6, [r4, #40]	; 0x28
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 80035f4:	e9c4 7804 	strd	r7, r8, [r4, #16]
  hspi4.Init.CRCPolynomial = 10;
 80035f8:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80035fa:	f7ff fa62 	bl	8002ac2 <HAL_SPI_Init>
 80035fe:	4606      	mov	r6, r0
 8003600:	b118      	cbz	r0, 800360a <main+0xc6>
  BSP_LED_On(LED4);
 8003602:	4640      	mov	r0, r8
 8003604:	f7fd f96a 	bl	80008dc <BSP_LED_On>
  while(1)
 8003608:	e7fe      	b.n	8003608 <main+0xc4>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360a:	4601      	mov	r1, r0
 800360c:	2214      	movs	r2, #20
 800360e:	a808      	add	r0, sp, #32
 8003610:	f000 f920 	bl	8003854 <memset>
  if(hspi4.Instance==SPI4)
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	454b      	cmp	r3, r9
 8003618:	d11f      	bne.n	800365a <main+0x116>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800361a:	9600      	str	r6, [sp, #0]
 800361c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800361e:	483e      	ldr	r0, [pc, #248]	; (8003718 <main+0x1d4>)
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003624:	646b      	str	r3, [r5, #68]	; 0x44
 8003626:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003630:	9603      	str	r6, [sp, #12]
 8003632:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003634:	f043 0310 	orr.w	r3, r3, #16
 8003638:	632b      	str	r3, [r5, #48]	; 0x30
 800363a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363c:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800363e:	f003 0310 	and.w	r3, r3, #16
 8003642:	9303      	str	r3, [sp, #12]
 8003644:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 8003646:	2354      	movs	r3, #84	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	e9cd 3708 	strd	r3, r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800364c:	2203      	movs	r2, #3
 800364e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003650:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003652:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003656:	f7fe f807 	bl	8001668 <HAL_GPIO_Init>
  BSP_LCD_Init();
 800365a:	f7fd fb67 	bl	8000d2c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 800365e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8003662:	2001      	movs	r0, #1
 8003664:	f7fd fa58 	bl	8000b18 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8003668:	2001      	movs	r0, #1
 800366a:	f7fd fa8d 	bl	8000b88 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800366e:	f7fd fab1 	bl	8000bd4 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003676:	f7fd fa8d 	bl	8000b94 <BSP_LCD_Clear>
		    *(imageBufferPtr+(col+(row*80)))=colorVar;
 800367a:	4e28      	ldr	r6, [pc, #160]	; (800371c <main+0x1d8>)
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800367c:	2514      	movs	r5, #20
  uint16_t colorVar = 1u;	// 0b0000011111100000 rrrrrggggggbbbbb green
 800367e:	2401      	movs	r4, #1
    HAL_Delay(100);
 8003680:	2064      	movs	r0, #100	; 0x64
 8003682:	f7fd fd67 	bl	8001154 <HAL_Delay>
    for( row = 0; row<80; row++)
 8003686:	6833      	ldr	r3, [r6, #0]
		    *(imageBufferPtr+(col+(row*80)))=colorVar;
 8003688:	2100      	movs	r1, #0
 800368a:	33a0      	adds	r3, #160	; 0xa0
	    for( col = 0; col<80; col++)
 800368c:	f1a3 02a0 	sub.w	r2, r3, #160	; 0xa0
		    *(imageBufferPtr+(col+(row*80)))=colorVar;
 8003690:	f822 4b02 	strh.w	r4, [r2], #2
	    for( col = 0; col<80; col++)
 8003694:	429a      	cmp	r2, r3
 8003696:	d1fb      	bne.n	8003690 <main+0x14c>
	    colorVar=colorVar<<1;
 8003698:	0064      	lsls	r4, r4, #1
 800369a:	b2a4      	uxth	r4, r4
		  colorVar =1u;
 800369c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80036a0:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80036a4:	bf08      	it	eq
 80036a6:	2401      	moveq	r4, #1
    for( row = 0; row<80; row++)
 80036a8:	f5b1 5fc8 	cmp.w	r1, #6400	; 0x1900
 80036ac:	f102 03a0 	add.w	r3, r2, #160	; 0xa0
 80036b0:	d1ec      	bne.n	800368c <main+0x148>
  for(int i = 0; i<20; i++)
 80036b2:	3d01      	subs	r5, #1
 80036b4:	d1e4      	bne.n	8003680 <main+0x13c>
		  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0)    //check if NSS (CS) pin is low
 80036b6:	4c18      	ldr	r4, [pc, #96]	; (8003718 <main+0x1d4>)
	HAL_SPI_Receive(&hspi4, (uint8_t*)spi_data, 6423, 200);
 80036b8:	4d19      	ldr	r5, [pc, #100]	; (8003720 <main+0x1dc>)
 80036ba:	4e15      	ldr	r6, [pc, #84]	; (8003710 <main+0x1cc>)
	  HAL_Delay(100);
 80036bc:	2064      	movs	r0, #100	; 0x64
 80036be:	f7fd fd49 	bl	8001154 <HAL_Delay>
		  if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4) == 0)    //check if NSS (CS) pin is low
 80036c2:	2110      	movs	r1, #16
 80036c4:	4620      	mov	r0, r4
 80036c6:	f7fe f8b5 	bl	8001834 <HAL_GPIO_ReadPin>
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d1f6      	bne.n	80036bc <main+0x178>
	HAL_SPI_Receive(&hspi4, (uint8_t*)spi_data, 6423, 200);
 80036ce:	23c8      	movs	r3, #200	; 0xc8
 80036d0:	f641 1217 	movw	r2, #6423	; 0x1917
 80036d4:	4629      	mov	r1, r5
 80036d6:	4630      	mov	r0, r6
 80036d8:	f7ff fc6f 	bl	8002fba <HAL_SPI_Receive>
	for(int i=0; i<12842; i++)
 80036dc:	4a10      	ldr	r2, [pc, #64]	; (8003720 <main+0x1dc>)
	HAL_SPI_Receive(&hspi4, (uint8_t*)spi_data, 6423, 200);
 80036de:	f243 232a 	movw	r3, #12842	; 0x322a
		if(*(dataPtr+i)== 0u)
 80036e2:	f832 1b02 	ldrh.w	r1, [r2], #2
 80036e6:	b929      	cbnz	r1, 80036f4 <main+0x1b0>
			if(*(dataPtr+i+1)== 0x55)
 80036e8:	8811      	ldrh	r1, [r2, #0]
 80036ea:	2955      	cmp	r1, #85	; 0x55
 80036ec:	d102      	bne.n	80036f4 <main+0x1b0>
				if(*(dataPtr+i+2)== 0xC6)
 80036ee:	8851      	ldrh	r1, [r2, #2]
 80036f0:	29c6      	cmp	r1, #198	; 0xc6
 80036f2:	d009      	beq.n	8003708 <main+0x1c4>
	for(int i=0; i<12842; i++)
 80036f4:	3b01      	subs	r3, #1
 80036f6:	d1f4      	bne.n	80036e2 <main+0x19e>
			  isEndOfFrame = findEndOfFrame(&spi_data[0]);     //check if the whole data was received by checking if the footer is there
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <main+0x1e0>)
 80036fa:	6013      	str	r3, [r2, #0]
			  if(isEndOfFrame == 1)
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0dd      	beq.n	80036bc <main+0x178>
				  BSP_LED_On(LED3);                           //if footer is there, signalize by setting LED3 on
 8003700:	2000      	movs	r0, #0
 8003702:	f7fd f8eb 	bl	80008dc <BSP_LED_On>
				  while(1);
 8003706:	e7fe      	b.n	8003706 <main+0x1c2>
					return 1;
 8003708:	2301      	movs	r3, #1
 800370a:	e7f5      	b.n	80036f8 <main+0x1b4>
 800370c:	40023800 	.word	0x40023800
 8003710:	20003590 	.word	0x20003590
 8003714:	40007000 	.word	0x40007000
 8003718:	40021000 	.word	0x40021000
 800371c:	20000084 	.word	0x20000084
 8003720:	200002b0 	.word	0x200002b0
 8003724:	200002ac 	.word	0x200002ac
 8003728:	40013400 	.word	0x40013400

0800372c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800372c:	4770      	bx	lr

0800372e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800372e:	e7fe      	b.n	800372e <HardFault_Handler>

08003730 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003730:	e7fe      	b.n	8003730 <MemManage_Handler>

08003732 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003732:	e7fe      	b.n	8003732 <BusFault_Handler>

08003734 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003734:	e7fe      	b.n	8003734 <UsageFault_Handler>

08003736 <SVC_Handler>:
 8003736:	4770      	bx	lr

08003738 <DebugMon_Handler>:
 8003738:	4770      	bx	lr

0800373a <PendSV_Handler>:
 800373a:	4770      	bx	lr

0800373c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800373c:	f7fd bcf8 	b.w	8001130 <HAL_IncTick>

08003740 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 8003740:	4801      	ldr	r0, [pc, #4]	; (8003748 <OTG_HS_IRQHandler+0x8>)
 8003742:	f7fe b882 	b.w	800184a <HAL_HCD_IRQHandler>
 8003746:	bf00      	nop
 8003748:	200035e8 	.word	0x200035e8

0800374c <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer (hhcd->pData);
 800374c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8003750:	f000 b818 	b.w	8003784 <USBH_LL_IncTimer>

08003754 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8003754:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8003758:	f000 b82a 	b.w	80037b0 <USBH_LL_Connect>

0800375c <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 800375c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8003760:	f000 b830 	b.w	80037c4 <USBH_LL_Disconnect>

08003764 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8003764:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8003768:	f000 b81a 	b.w	80037a0 <USBH_LL_PortEnabled>

0800376c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 800376c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8003770:	f000 b81a 	b.w	80037a8 <USBH_LL_PortDisabled>

08003774 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
}
 8003774:	4770      	bx	lr

08003776 <USBH_LL_Stop>:
  * @brief  Stops the Low Level portion of the Host driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003776:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 8003778:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800377c:	f7fe fbb2 	bl	8001ee4 <HAL_HCD_Stop>
  return USBH_OK; 
}
 8003780:	2000      	movs	r0, #0
 8003782:	bd08      	pop	{r3, pc}

08003784 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8003784:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 8003788:	3201      	adds	r2, #1
 800378a:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800378e:	7802      	ldrb	r2, [r0, #0]
 8003790:	2a0b      	cmp	r2, #11
 8003792:	d104      	bne.n	800379e <USBH_LL_IncTimer+0x1a>
 8003794:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8003798:	b10b      	cbz	r3, 800379e <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4718      	bx	r3
}
 800379e:	4770      	bx	lr

080037a0 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
}
 80037a6:	4770      	bx	lr

080037a8 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 80037ae:	4770      	bx	lr

080037b0 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 80037b0:	2301      	movs	r3, #1
 80037b2:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 80037bc:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	4770      	bx	lr

080037c4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80037c8:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 80037ca:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 80037cc:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 80037d0:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 80037d4:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  USBH_LL_Stop(phost);
 80037d8:	f7ff ffcd 	bl	8003776 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80037dc:	7921      	ldrb	r1, [r4, #4]
 80037de:	4620      	mov	r0, r4
 80037e0:	f000 f806 	bl	80037f0 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80037e4:	7961      	ldrb	r1, [r4, #5]
 80037e6:	4620      	mov	r0, r4
 80037e8:	f000 f802 	bl	80037f0 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80037ec:	4628      	mov	r0, r5
 80037ee:	bd38      	pop	{r3, r4, r5, pc}

080037f0 <USBH_FreePipe>:
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
  if (idx < 11U)
 80037f0:	290a      	cmp	r1, #10
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80037f2:	bf98      	it	ls
 80037f4:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
  }

  return USBH_OK;
}
 80037f8:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 80037fc:	bf9e      	ittt	ls
 80037fe:	f8d1 3484 	ldrls.w	r3, [r1, #1156]	; 0x484
 8003802:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8003806:	f8c1 3484 	strls.w	r3, [r1, #1156]	; 0x484
}
 800380a:	4770      	bx	lr

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	4d0d      	ldr	r5, [pc, #52]	; (8003844 <__libc_init_array+0x38>)
 8003810:	4c0d      	ldr	r4, [pc, #52]	; (8003848 <__libc_init_array+0x3c>)
 8003812:	1b64      	subs	r4, r4, r5
 8003814:	10a4      	asrs	r4, r4, #2
 8003816:	2600      	movs	r6, #0
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	4d0b      	ldr	r5, [pc, #44]	; (800384c <__libc_init_array+0x40>)
 800381e:	4c0c      	ldr	r4, [pc, #48]	; (8003850 <__libc_init_array+0x44>)
 8003820:	f000 f820 	bl	8003864 <_init>
 8003824:	1b64      	subs	r4, r4, r5
 8003826:	10a4      	asrs	r4, r4, #2
 8003828:	2600      	movs	r6, #0
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	08007588 	.word	0x08007588
 8003848:	08007588 	.word	0x08007588
 800384c:	08007588 	.word	0x08007588
 8003850:	0800758c 	.word	0x0800758c

08003854 <memset>:
 8003854:	4402      	add	r2, r0
 8003856:	4603      	mov	r3, r0
 8003858:	4293      	cmp	r3, r2
 800385a:	d100      	bne.n	800385e <memset+0xa>
 800385c:	4770      	bx	lr
 800385e:	f803 1b01 	strb.w	r1, [r3], #1
 8003862:	e7f9      	b.n	8003858 <memset+0x4>

08003864 <_init>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr

08003870 <_fini>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr
